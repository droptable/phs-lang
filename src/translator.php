<?php

namespace phs;

require_once 'writer.php';

use phs\ast\Unit;

/** translator (for now PHP only) */
class Translator extends Walker
{
  // compiler context
  private $ctx;
  
  // output-buffer
  private $out;
  
  public function __construct(Context $ctx)
  {
    parent::__construct($ctx);
    $this->ctx = $ctx;  
  }
  
  public function translate(Unit $unit)
  {
    $this->out = new FileWriter($unit->dest);
    
    $this->emitln("<?php");
    $this->emitln("/* generated by phs */");
    
    $this->walk($unit);
  }
  
  /* ------------------------------------ */
  
  public function visit_let_decl($node)
  {
    $this->visit_var_decl($node);  
  }
  
  public function visit_var_decl($node)
  {
    foreach ($node->vars as $var) {
      $this->emit('$' . ident_to_str($var->dest));
      $this->emit('=');
      
      if (!$var->init) 
        $this->emit('null');
      elseif ($var->init->value !== null)
        $this->emit('/* some value */null');
      else
        $this->emit('/* unknown */null');
      
      $this->emitln(';');
    }
  }
  
  /* ------------------------------------ */
  
  public function emit($data)
  {
    $this->out->write($data);
  }
  
  public function emitln($data)
  {
    $this->emit($data);
    $this->emit("\n");
  }
  
  /* ------------------------------------ */
  
  /**
   * error handler
   * 
   */
  public function error_at()
  {
    $args = func_get_args();    
    $loc = array_shift($args);
    $lvl = array_shift($args);
    $msg = array_shift($args);
    
    $this->ctx->verror_at($loc, COM_TRS, $lvl, $msg, $args);
  }
}
