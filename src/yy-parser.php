<?php

/* this parser-skeleton is based on the awesome 
   work of nikic (https://github.com/nikic) 
   with some extensions (error-recovery and location-tracking) */

/**
 * This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *   the grammar file gen/yy-parser-tpl.y
 *   the parser skeleton gen/kymacc.php.parser
 *
 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
 * the work by Masato Bito and is in the PUBLIC DOMAIN.
 */

namespace phs;


const YYERRTOK = 256;
const T_APLUS = 257;
const T_AMINUS = 258;
const T_AMUL = 259;
const T_ADIV = 260;
const T_AMOD = 261;
const T_APOW = 262;
const T_ABIT_NOT = 263;
const T_ABIT_OR = 264;
const T_ABIT_AND = 265;
const T_ABIT_XOR = 266;
const T_ABOOL_OR = 267;
const T_ABOOL_AND = 268;
const T_ABOOL_XOR = 269;
const T_ASHIFT_L = 270;
const T_ASHIFT_R = 271;
const T_RANGE = 272;
const T_YIELD = 273;
const T_BOOL_OR = 274;
const T_BOOL_XOR = 275;
const T_BOOL_AND = 276;
const T_EQ = 277;
const T_NEQ = 278;
const T_IN = 279;
const T_IS = 280;
const T_ISNT = 281;
const T_GTE = 282;
const T_LTE = 283;
const T_SL = 284;
const T_SR = 285;
const T_POW = 286;
const T_AS = 287;
const T_ARR = 288;
const T_REST = 289;
const T_DEL = 290;
const T_INC = 291;
const T_DEC = 292;
const T_NEW = 293;
const T_DDDOT = 294;
const T_FN = 295;
const T_LET = 296;
const T_USE = 297;
const T_ENUM = 298;
const T_CLASS = 299;
const T_TRAIT = 300;
const T_IFACE = 301;
const T_MODULE = 302;
const T_REQUIRE = 303;
const T_IDENT = 304;
const T_LNUM = 305;
const T_DNUM = 306;
const T_SNUM = 307;
const T_STRING = 308;
const T_REGEXP = 309;
const T_TRUE = 310;
const T_FALSE = 311;
const T_NULL = 312;
const T_THIS = 313;
const T_SUPER = 314;
const T_GET = 315;
const T_SET = 316;
const T_DO = 317;
const T_IF = 318;
const T_ELSIF = 319;
const T_ELSE = 320;
const T_FOR = 321;
const T_TRY = 322;
const T_GOTO = 323;
const T_BREAK = 324;
const T_CONTINUE = 325;
const T_THROW = 326;
const T_CATCH = 327;
const T_FINALLY = 328;
const T_WHILE = 329;
const T_ASSERT = 330;
const T_SWITCH = 331;
const T_CASE = 332;
const T_DEFAULT = 333;
const T_RETURN = 334;
const T_CONST = 335;
const T_FINAL = 336;
const T_GLOBAL = 337;
const T_STATIC = 338;
const T_EXTERN = 339;
const T_PUBLIC = 340;
const T_PRIVATE = 341;
const T_PROTECTED = 342;
const T_SEALED = 343;
const T_INLINE = 344;
const T_PHP = 345;
const T_TEST = 346;
const T_CFILE = 347;
const T_CLINE = 348;
const T_CCOLN = 349;
const T_CFN = 350;
const T_CCLASS = 351;
const T_CMETHOD = 352;
const T_CMODULE = 353;
const T_NL = 354;
const T_TINT = 355;
const T_TBOOL = 356;
const T_TFLOAT = 357;
const T_TSTRING = 358;
const T_TREGEXP = 359;
const T_INVL = 360;
const T_END = 361;

require_once 'context.php';
require_once 'parser_base.php';

require_once 'yy-ast.php';
require_once 'yy-glob.php';
require_once 'yy-lexer.php';

use phs\ast\Node;
use phs\ast\Unit;
use phs\ast\Module;
use phs\ast\Program;
use phs\ast\RequireDecl;
use phs\ast\AttrDecl;
use phs\ast\CompAttr;
use phs\ast\TopexAttr;
use phs\ast\AttrDef;
use phs\ast\AttrVal;
use phs\ast\UseDecl;
use phs\ast\UseAlias;
use phs\ast\UseUnpack;
use phs\ast\EnumDecl;
use phs\ast\VarItem;
use phs\ast\ArrDestr;
use phs\ast\ObjDestr;
use phs\ast\ClassDecl;
use phs\ast\CtorDecl;
use phs\ast\DtorDecl;
use phs\ast\GetterDecl;
use phs\ast\SetterDecl;
use phs\ast\NestedMods;
use phs\ast\TraitUse;
use phs\ast\TraitItem;
use phs\ast\TraitDecl;
use phs\ast\IfaceDecl;
use phs\ast\LetDecl;
use phs\ast\VarDecl;
use phs\ast\FnDecl;
use phs\ast\FnExpr;
use phs\ast\Param;
use phs\ast\ThisParam;
use phs\ast\RestParam;
use phs\ast\DoStmt;
use phs\ast\IfStmt;
use phs\ast\ForInStmt;
use phs\ast\ForStmt;
use phs\ast\TryStmt;
use phs\ast\PhpStmt;
use phs\ast\GotoStmt;
use phs\ast\TestStmt;
use phs\ast\BreakStmt;
use phs\ast\ContinueStmt;
use phs\ast\ThrowStmt;
use phs\ast\WhileStmt;
use phs\ast\YieldStmt;
use phs\ast\AssertStmt;
use phs\ast\SwitchStmt;
use phs\ast\ReturnStmt;
use phs\ast\LabeledStmt;
use phs\ast\ElsifItem;
use phs\ast\ElseItem;
use phs\ast\CatchItem;
use phs\ast\FinallyItem;
use phs\ast\PhpUse;
use phs\ast\PhpUseItem;
use phs\ast\CaseItem;
use phs\ast\CaseLabel;
use phs\ast\Block;
use phs\ast\ExprStmt;
use phs\ast\BinExpr;
use phs\ast\CheckExpr;
use phs\ast\CastExpr;
use phs\ast\UpdateExpr;
use phs\ast\AssignExpr;
use phs\ast\MemberExpr;
use phs\ast\CondExpr;
use phs\ast\CallExpr;
use phs\ast\UnaryExpr;
use phs\ast\NewExpr;
use phs\ast\DelExpr;
use phs\ast\YieldExpr;
use phs\ast\NamedArg;
use phs\ast\RestArg;
use phs\ast\RegexpLit;
use phs\ast\Name;
use phs\ast\TypeId;
use phs\ast\Ident;
use phs\ast\ThisExpr;
use phs\ast\SuperExpr;
use phs\ast\NullLit;
use phs\ast\TrueLit;
use phs\ast\FalseLit;
use phs\ast\StrLit;
use phs\ast\EngineConst;
use phs\ast\LNumLit;
use phs\ast\DNumLit;
use phs\ast\SNumLit;
use phs\ast\ArrayLit;
use phs\ast\ArrayGen;
use phs\ast\SpreadExpr;
use phs\ast\ObjectLit;
use phs\ast\ObjectPair;


class Parser extends ParserBase
{
  const TOKEN_NONE    = -1;
  const TOKEN_INVALID = 131;

  const TOKEN_MAP_SIZE = 362;

  const YYLAST       = 1665;
  const YY2TBLSTATE  = 581;
  const YYGLAST      = 1061;
  const YYNLSTATES   = 666;
  const YYINTERRTOK  = 1;
  const YYUNEXPECTED = 32767;
  const YYDEFAULT    = -32766;

  /* @var array Map of token ids to their respective names */
  private static $terminals = [
    "EOF",
    "error",
    "','",
    "T_APLUS",
    "T_AMINUS",
    "T_AMUL",
    "T_ADIV",
    "T_AMOD",
    "T_APOW",
    "T_ABIT_NOT",
    "T_ABIT_OR",
    "T_ABIT_AND",
    "T_ABIT_XOR",
    "T_ABOOL_OR",
    "T_ABOOL_AND",
    "T_ABOOL_XOR",
    "T_ASHIFT_L",
    "T_ASHIFT_R",
    "'='",
    "T_RANGE",
    "T_YIELD",
    "'?'",
    "':'",
    "T_BOOL_OR",
    "T_BOOL_XOR",
    "T_BOOL_AND",
    "'|'",
    "'^'",
    "'&'",
    "T_EQ",
    "T_NEQ",
    "T_IN",
    "T_IS",
    "T_ISNT",
    "T_GTE",
    "T_LTE",
    "'>'",
    "'<'",
    "T_SL",
    "T_SR",
    "'+'",
    "'-'",
    "'*'",
    "'/'",
    "'%'",
    "T_POW",
    "T_AS",
    "T_ARR",
    "T_REST",
    "T_DEL",
    "'!'",
    "'~'",
    "T_INC",
    "T_DEC",
    "T_NEW",
    "'.'",
    "T_DDDOT",
    "'['",
    "']'",
    "'('",
    "')'",
    "T_FN",
    "T_LET",
    "T_USE",
    "T_ENUM",
    "T_CLASS",
    "T_TRAIT",
    "T_IFACE",
    "T_MODULE",
    "T_REQUIRE",
    "T_IDENT",
    "T_LNUM",
    "T_DNUM",
    "T_SNUM",
    "T_STRING",
    "T_REGEXP",
    "T_TRUE",
    "T_FALSE",
    "T_NULL",
    "T_THIS",
    "T_SUPER",
    "T_GET",
    "T_SET",
    "T_DO",
    "T_IF",
    "T_ELSIF",
    "T_ELSE",
    "T_FOR",
    "T_TRY",
    "T_GOTO",
    "T_BREAK",
    "T_CONTINUE",
    "T_THROW",
    "T_CATCH",
    "T_FINALLY",
    "T_WHILE",
    "T_ASSERT",
    "T_SWITCH",
    "T_CASE",
    "T_DEFAULT",
    "T_RETURN",
    "T_CONST",
    "T_FINAL",
    "T_GLOBAL",
    "T_STATIC",
    "T_EXTERN",
    "T_PUBLIC",
    "T_PRIVATE",
    "T_PROTECTED",
    "T_SEALED",
    "T_INLINE",
    "T_PHP",
    "T_TEST",
    "T_CFILE",
    "T_CLINE",
    "T_CCOLN",
    "T_CFN",
    "T_CCLASS",
    "T_CMETHOD",
    "T_CMODULE",
    "T_NL",
    "T_TINT",
    "T_TBOOL",
    "T_TFLOAT",
    "T_TSTRING",
    "T_TREGEXP",
    "T_END",
    "';'",
    "'{'",
    "'}'",
    "'@'"
    , "???"
  ];

  /* @var array Map which translates lexer tokens to internal tokens */
  private static $translate = [
        0,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,   50,  131,  131,  131,   44,   28,  131,
       59,   60,   42,   40,    2,   41,   55,   43,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,   22,  127,
       37,   18,   36,   21,  130,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,   57,  131,   58,   27,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  128,   26,  129,   51,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,    1,    3,    4,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   19,   20,   23,   24,   25,   29,   30,   31,
       32,   33,   34,   35,   38,   39,   45,   46,   47,   48,
       49,   52,   53,   54,   56,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
      106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      131,  126
  ];

  private static $yyaction = [
     1276,  223,  224,  225,  226,  103,  398,  399,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      400,-32766,-32766,-32766,-32766,  239, 1058, 1059, 1134,   14,
      259,   83,    0,   71,  466,  573,  596,  143,  390, 1135,
     1136, 1236, 1237, 1251, 1264, 1254, 1255, 1256, 1252, 1275,
     1134,  612,  488,  489, 1207,  628, 1241, 1242, 1243, 1257,
     1273, 1135, 1136, 1269, 1244, 1245, 1246, 1267, 1247, 1274,
     1270, 1271, 1248, 1249, 1250, 1268, 1240, 1265, 1266, 1179,
     1272, 1259, 1260, 1277, 1258, 1253, 1261, 1262, 1263, 1283,
     1284, 1238, 1239, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
      -91, 1278, 1279, 1280, 1281, 1282,-32766,-32766,-32766,-32766,
      801,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  780,
     1138, 1139, 1153, 1166, 1156, 1157, 1158, 1154, 1178,   82,
      896,  219,  220,  221,  222, 1143, 1144, 1145, 1159, 1176,
      851,  474, 1172, 1146, 1147, 1148, 1170, 1149, 1177, 1173,
     1174, 1150, 1151, 1152, 1171, 1142, 1167, 1168, 1169, 1175,
     1161, 1162, 1180, 1160, 1155, 1163, 1164, 1165, 1186, 1187,
     1140, 1141, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1226,
     1181, 1182, 1183, 1184, 1185,   -8,  588,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,  466,   84,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,  488,  489,  241,   85,   86,  623,-32766,-32766,
    -32766,-32766,-32766,  608,  476,   87,   88,   89,   90,  459,
      174,  175,  176,  177,  494,   75,  -44,  -44,  454,  -44,
      -44,  478,  479,  485,   76,  169,  395,  396,  170,  171,
      172,  173,  174,  175,  176,  177,  881,  240,   16,  563,
      -92,  596,  509,  564,  480,  467,  468,   91,   -1,  588,
      565,   92,  566,  221,  222,   93,  714,  715,  716,  717,
      723,  718,  719,  720,  721,  722,  589,  507,   84,-32766,
    -32766,-32766,-32766, 1110,-32766,-32766,-32766,-32766,-32766,-32766,
      619,  689,  897,    8,   -8,  460,-32766,-32766,   85,   86,
      861,-32766,  653,-32766,  477,  775,  389,  476,   87,   88,
       89,   90,  459,  477,  701,  447,  220,  221,  222,  -44,
      -44,  454,  -44,  -44,  478,  479,  438,   76,  714,  715,
      716,  717,  723,  718,  719,  720,  721,  722,  238,  400,
      450,   16,  563,  860,  239,  509,  564,  480,  467,  468,
       91,-32767,-32767,  565,   92,  566,   81,  477,   93,  714,
      715,  716,  717,  723,  718,  719,  720,  721,  722,  589,
      507,  635,  636,  637,  638,  639,    2,  451, 1129, 1130,
     1131, 1132, 1133,  433,  689,  897,    8,   73,  460,  144,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
      155,  156,  157,  158,  159,  160,  594,   80,  652,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  395,  396,
      170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
      180,  181,  397,  588,  433,  188,  433,  182,  995,  996,
      466,   14,  242,   81,  624,   71, -150, 1134,  596, 1134,
      497,  350,   84,  101,  434,  189,  190,  436,  495,  496,
     1135, 1136,  247, 1217,  486,  191,  192,  193,  194,  464,
      435,  243,   85,   86,   69,  583,  465,-32766,-32766,-32766,
      584,  476,   87,   88,   89,   90,  459,  457,  586,  448,
      610,  197,  475,  -44,  -44,  454,  -44,  -44,  478,  479,
      438,   76,  626, 1108, -150,  434,  -91,  434,  235,  236,
      237,  238,  400,-32766,-32766,   16,  563,  239,  455,  509,
      564,  480,  467,  468,   91,  492,  588,  565,   92,  566,
      176,  177,   93,  714,  715,  716,  717,  723,  718,  719,
      720,  721,  722,  589,  507,   84,  218,  813,   82, -157,
      219,  220,  221,  222,  491,  456,    5,  477,  689,  897,
        8,  811,  460,  621,  258,   85,   86,  900,  597,  598,
      599,  600,  601,   13,  476,   87,   88,   89,   90,  459,
     -157,-32767,-32767,  483,  431,  580,  -44,  -44,  454,  -44,
      -44,  478,  479,  452,   76, 1058, 1059,  437,   14,  458,
       83,  264,   71,  610,  484,  514,  572,  449,   16,  563,
      783,  369,  509,  564,  480,  467,  468,   91,  244,  643,
      565,   92,  566,  256,  195,   93,  714,  715,  716,  717,
      723,  718,  719,  720,  721,  722,  589,  507,    4,    3,
      742,  371,  785,  370,  260,   11,  257,  199,  222,  246,
      200,  689,  897,    8,  196,  460,  104,  105,  106,  107,
      108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
      118,  119,  120,  245,   78,-32766,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  392,  393,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  394,
      588,  891,  263,  249,  142,  934,  935,  493,  892,  265,
       79,  178,  179,  180,  181,  397,  101,  266,  255,   84,
      182,  995,  996,  248,   14,  198,   81,  745,   71,  262,
      482,  197,   71,  477,  445,  453,   21, 1207,  239,   85,
       86, 1124,  433,  576,  615,  102, 1235, 1218,  476,   87,
       88,   89,   90,  459, 1078, 1134, 1015,  252, 1077, 1014,
      -44,  -44,  953, 1220, 1219,  954, 1135, 1136,  735,  251,
      401,  201,   77,   64,-32767,  473,  790,  250,  187,  697,
      700,  812,   16,  563, 1107,  587,  509,  564,  480,  467,
      468,   91,  185,  588,  565,   92,  566, -222, -222,   93,
      714,  715,  716,  717,  723,  718,  719,  720,  721,  722,
      589,  507,   84,  351,  184,  183,   22,   19,   26,  748,
      585,  253,  186,  254, 1109,   23,  897,    8, -222,  463,
       24,   25,   85,   86,  663, 1106,  471,  571,  432,    0,
        0,  476,   87,   88,   89,   90,  459,  678,   12,  693,
      844,  736,    0,  -44,  -44,  703,    0,  846,  850,    0,
      691,  848,  854,  796,  795,  692,  857,  899,  841,    0,
      845,  847,  702,  802,  800,   16,  563,  771,  773,  509,
      564,  480,  467,  468,   91,    0,  527,  565,   92,  566,
      244,  643,   93,  714,  715,  716,  717,  723,  718,  719,
      720,  721,  722,  589,  507,   84,  898,  781,  776,  766,
      768,  852,  827,    0,    8,  505,  550,  430,    0,  897,
        8,    0,  463,  708,  895,   85,   86,  853,  777,  741,
      774,  784,  724,  840,  476,   87,   88,   89,   90,  459,
      672,  782,  673, 1227, 1228,    0,  -44,  -44,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,  563,
        0,    0,  509,  564,  480,  467,  468,   91,    0,  588,
      565,   92,  566,    0,    0,   93,  714,  715,  716,  717,
      723,  718,  719,  720,  721,  722,  589,  507,   84,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  897,    8,  893,  463,    0,    0,   85,   86,
        0,    0,    0,    0,    0,    0,    0,  476,   87,   88,
       89,   90,  459,    0,    0,    0,    0,    0,    0,  -44,
      -44,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   16,  563,    0,    0,  509,  564,  480,  467,  468,
       91,    0,  588,  565,   92,  566,    0,    0,   93,  714,
      715,  716,  717,  723,  718,  719,  720,  721,  722,  589,
      507,   84,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  897,    8,  894,  463,    0,
        0,   85,   86,    0,    0,    0,    0,    0,    0,    0,
      476,   87,   88,   89,   90,  459,    0,    0,    0,    0,
        0,    0,  -44,  -44,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   16,  563,    0,    0,  509,  564,
      480,  467,  468,   91,    0,    0,  565,   92,  566,    0,
        0,   93,  714,  715,  716,  717,  723,  718,  719,  720,
      721,  722,  589,  507,   94,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  897,    8,
        0,  463,    0,    0,   95,   96,    0,  665,  588,    0,
        0,    0,    0,  481,   97,   98,   99,  100,  461,    0,
      477,   70,    0,   68,    0,  462,    0,   84,    0,    0,
        0,    0,    0,    0, 1134, 1208, 1209, 1210, 1207,    0,
     1198, 1199, 1197, 1195, 1196, 1135, 1136,   85,   86,    0,
        0,    0,    0,    0,    0,    0,  476,   87,   88,   89,
       90,  459,    0,    0,    0,    0,    0,    0,-32766,    0,
        0,    0,    0,    0,    0,    0,    0, 1200, 1201, 1202,
     1203, 1204, 1205, 1206,    0,    0,    0,    0,    0,  617,
       16,  563,   10,    0,  509,  564,  480,  467,  468,   91,
        0,    0,  565,   92,  566,    0,    0,   93,  188,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  589,  507,
        0,    0,    0,    0,    0,    0,    0,    0,  189,  190,
        0,    0,    0,    0,  897,    8,    0,  486,  191,  192,
      193,  194,  464,    0,    0,    0,    0,   69,    0,  465,
      -44,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,    0,-32766,
        0,-32766,-32766,-32766,-32766,-32766,-32766,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  714,
      715,  716,  717,  723,  718,  719,  720,  721,  722,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  901,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,    0,   82,    0,  219,  220,  221,  222,
        0,    0,    0,    0,  261,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,    0,-32766,    0,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,    0,-32766,    0,
    -32766,-32766,-32766,-32766,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      218,    0,   82,    0,  219,  220,  221,  222,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,    0,-32766,    0,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,    0,-32766,
        0,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
    -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
        0,-32766,-32766,-32766,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,-32766,-32766,    0,    0,    0,    0,    0,    0,
        0,-32766,-32766,-32766,-32766,-32766,-32766,    0,-32766,    0,
        0,-32766,    0,-32766,    0,    0,    0,    0,    0,    0,
        0,    0,-32766,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,-32766,-32766
  ];

  private static $yycheck = [
       20,   27,   28,   29,   30,    2,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   27,   28,   29,   30,   51,   52,   53,   70,   55,
       47,   57,    0,   59,   63,   22,    1,   57,   46,   81,
       82,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,    1,   81,   82,   74,    1,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   97,   98,   20,
      100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      129,  121,  122,  123,  124,  125,   27,   28,   29,   30,
      127,   32,   33,   34,   35,   36,   37,   38,   39,  127,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   21,
      127,   23,   24,   25,   26,   76,   77,   78,   79,   80,
      127,    2,   83,   84,   85,   86,   87,   88,   89,   90,
       91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
      111,  112,  113,  114,  115,  116,  117,  118,  119,  129,
      121,  122,  123,  124,  125,    0,    1,    3,    4,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   63,   20,    3,    4,    5,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   81,   82,   31,   40,   41,    1,   42,   43,
       44,   45,   46,    1,   49,   50,   51,   52,   53,   54,
       38,   39,   40,   41,   46,    2,   61,   62,   63,   64,
       65,   66,   67,   46,   69,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,  127,   31,   83,   84,
      129,    1,   87,   88,   89,   90,   91,   92,    0,    1,
       95,   96,   97,   25,   26,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,   20,   27,
       28,   29,   30,   60,   32,   33,   34,   35,   36,   37,
        1,  126,  127,  128,  129,  130,   52,   53,   40,   41,
      127,   57,    1,   59,   56,  127,  128,   49,   50,   51,
       52,   53,   54,   56,  127,  128,   24,   25,   26,   61,
       62,   63,   64,   65,   66,   67,   68,   69,  101,  102,
      103,  104,  105,  106,  107,  108,  109,  110,   45,   46,
       22,   83,   84,  127,   51,   87,   88,   89,   90,   91,
       92,   52,   53,   95,   96,   97,   57,   56,  100,  101,
      102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
      112,  121,  122,  123,  124,  125,  128,   59,  121,  122,
      123,  124,  125,   57,  126,  127,  128,    2,  130,    3,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,    1,   21,    1,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,    1,   57,   20,   57,   51,   52,   53,
       63,   55,    2,   57,    1,   59,    2,   70,    1,   70,
       22,   18,   20,   48,  128,   40,   41,    2,   81,   82,
       81,   82,   18,   58,   49,   50,   51,   52,   53,   54,
        2,   31,   40,   41,   59,   49,   61,   42,   43,   44,
       54,   49,   50,   51,   52,   53,   54,    2,   60,    2,
       64,   48,   59,   61,   62,   63,   64,   65,   66,   67,
       68,   69,    1,   60,   60,  128,  129,  128,   42,   43,
       44,   45,   46,   27,   28,   83,   84,   51,   22,   87,
       88,   89,   90,   91,   92,   46,    1,   95,   96,   97,
       40,   41,  100,  101,  102,  103,  104,  105,  106,  107,
      108,  109,  110,  111,  112,   20,   19,   60,   21,   48,
       23,   24,   25,   26,   48,   59,  120,   56,  126,  127,
      128,   60,  130,  127,    2,   40,   41,  127,  121,  122,
      123,  124,  125,    2,   49,   50,   51,   52,   53,   54,
       79,   52,   53,   61,   62,   79,   61,   62,   63,   64,
       65,   66,   67,    2,   69,   52,   53,    2,   55,    2,
       57,   18,   59,   64,   65,   93,   94,  128,   83,   84,
      127,  128,   87,   88,   89,   90,   91,   92,   98,   99,
       95,   96,   97,   18,   18,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  127,  128,
      127,  128,  127,  128,   18,   22,   22,   22,   26,   22,
       22,  126,  127,  128,   22,  130,    3,    4,    5,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   22,   21,   27,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   22,   22,   22,   51,   52,   53,   46,   22,   47,
       57,   42,   43,   44,   45,   46,   48,   47,   47,   20,
       51,   52,   53,   47,   55,   47,   57,   60,   59,   47,
       56,   48,   59,   56,   59,   51,   86,   74,   51,   40,
       41,   75,   57,   85,   87,  111,   58,   58,   49,   50,
       51,   52,   53,   54,   58,   70,   58,   60,   58,   58,
       61,   62,   58,   58,   58,   58,   81,   82,   58,   60,
       59,   59,   59,   59,   59,   59,  120,   60,   60,   60,
       60,   60,   83,   84,   60,   60,   87,   88,   89,   90,
       91,   92,   60,    1,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
      111,  112,   20,  128,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,  127,  128,  129,  130,
       60,   60,   40,   41,   60,   60,   63,   95,   62,   -1,
       -1,   49,   50,   51,   52,   53,   54,  120,  120,  120,
      127,  129,   -1,   61,   62,  129,   -1,  127,  127,   -1,
      127,  127,  127,  127,  127,  127,  127,  127,  127,   -1,
      127,  127,  127,  127,  127,   83,   84,  127,  127,   87,
       88,   89,   90,   91,   92,   -1,    1,   95,   96,   97,
       98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
      108,  109,  110,  111,  112,   20,  127,  127,  127,  127,
      127,  127,  127,   -1,  128,  128,  128,  128,   -1,  127,
      128,   -1,  130,  129,  129,   40,   41,  129,  129,  129,
      129,  129,  129,  129,   49,   50,   51,   52,   53,   54,
      129,  129,  129,  129,  129,   -1,   61,   62,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   83,   84,
       -1,   -1,   87,   88,   89,   90,   91,   92,   -1,    1,
       95,   96,   97,   -1,   -1,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,   20,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,  127,  128,  129,  130,   -1,   -1,   40,   41,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   49,   50,   51,
       52,   53,   54,   -1,   -1,   -1,   -1,   -1,   -1,   61,
       62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   83,   84,   -1,   -1,   87,   88,   89,   90,   91,
       92,   -1,    1,   95,   96,   97,   -1,   -1,  100,  101,
      102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
      112,   20,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,  127,  128,  129,  130,   -1,
       -1,   40,   41,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       49,   50,   51,   52,   53,   54,   -1,   -1,   -1,   -1,
       -1,   -1,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   83,   84,   -1,   -1,   87,   88,
       89,   90,   91,   92,   -1,   -1,   95,   96,   97,   -1,
       -1,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,   20,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  127,  128,
       -1,  130,   -1,   -1,   40,   41,   -1,   43,    1,   -1,
       -1,   -1,   -1,   49,   50,   51,   52,   53,   54,   -1,
       56,   57,   -1,   59,   -1,   61,   -1,   20,   -1,   -1,
       -1,   -1,   -1,   -1,   70,   71,   72,   73,   74,   -1,
       76,   77,   78,   79,   80,   81,   82,   40,   41,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   49,   50,   51,   52,
       53,   54,   -1,   -1,   -1,   -1,   -1,   -1,   61,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,  113,  114,  115,
      116,  117,  118,  119,   -1,   -1,   -1,   -1,   -1,    1,
       83,   84,  128,   -1,   87,   88,   89,   90,   91,   92,
       -1,   -1,   95,   96,   97,   -1,   -1,  100,   20,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  111,  112,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,
       -1,   -1,   -1,   -1,  127,  128,   -1,   49,   50,   51,
       52,   53,   54,   -1,   -1,   -1,   -1,   59,   -1,   61,
       62,    3,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   -1,   21,
       -1,   23,   24,   25,   26,   27,   28,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  101,
      102,  103,  104,  105,  106,  107,  108,  109,  110,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,  127,    3,    4,    5,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   -1,   21,   -1,   23,   24,   25,   26,
       -1,   -1,   -1,   -1,   31,    3,    4,    5,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   -1,   21,   -1,   23,   24,   25,   26,   27,
        3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   -1,   21,   -1,
       23,   24,   25,   26,    3,    4,    5,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   -1,   21,   -1,   23,   24,   25,   26,    3,    4,
        5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   -1,   21,   -1,   23,   24,
       25,    3,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   -1,   21,
       -1,   23,   24,    3,    4,    5,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       -1,   21,   20,   23,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   40,   41,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   49,   50,   51,   52,   53,   54,   -1,   56,   -1,
       -1,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   70,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   81,   82
  ];

  private static $yybase = [
      278,  185,  452,  452,  545,  545,  719,  812,  905,  998,
       50, 1091, 1091,  -20,   59,   13, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227,  751,  677,  795,
      753,  754,  755,  758,  671,  724,  708,  701,  721,  700,
      720,  785,  790,  791,  699,  767,  794,  770,  771,  673,
      406,  406,  406,  406,  406,  406,  406,  406, 1433,  406,
      406,  406,  406,  406, 1308, 1511, 1511, 1511,  467,  270,
      425,  463,  760,  688,  776,  703,  654,   35,  652,  226,
      648,   54,  644,  427, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,  435,  435,
      435,  435,  435,  435,  435, 1184, 1184, 1184, 1184, 1184,
     1184,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
     1184, 1184,  435, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
      435,  435,  435,  435,  435,  435,  435,  435, 1184, 1184,
     1184, 1184,  435,  435, 1184, 1184, 1184,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  184,  184,  184,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  184,  184,  108,  108,  108, 1580, 1580, 1558, 1558,
      312, 1535, 1535,  258, 1487, 1487,  642, 1462, 1462,  -26,
     1368, 1368,  668,  506,  224,  224,  224,  224,   -6,   -6,
     1582,  397,  399,  399,  705,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  272,  272,  272,  272,  -29,
      -29,  -29,  141,  510,  510,  510,  510,   79,   79,  819,
      689,  689,  689,  689,  689,  689,  486,  486,  486,  247,
      247,  247,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  521,  455,  455,  455,  455,  455,  455,  455,  455,
      313,  313,  313,  313,  186,  186,  186,  186,  186,  186,
      186,  186,  707,  707,  707,  707,  186,  186,  707,  707,
      346,  346,  346,  346,  346,  346,  346,  346,  268,  319,
      319,  319,  319,  549,  549,  321,  446,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      232,  697,  731,  309,  697,  731,  697,  743,  750,  559,
      198,  -42,  818,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -17,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      207,  531,  460,  464,  448,  540,  532,  683,  532,  734,
      693,  338,  693,  698,  695,  766,  516,  696,  693,  691,
      702,  682,  690,  803,  802,    3,  503,  815,  542,  456,
      756,  535,  236,  193,  757,  730,  742,  243,  507,  526,
      499,  746,  779,  799,  139,  453,  778,  533,  814,   -8,
      793,  678,  735,  735,  735,  735,  735,  670,  735,  735,
      735,  735,  735,  733,  806,  733,  733,  405,  806,  731,
      591,  733,  806,  683,  683,  793,  733,  678,  731,  704,
      264,  731,  731,  731,  731,  806,  806,  806,  759,  808,
       32,  694,  643,  686,  725,  726,  744,  775,  774,  752,
      782,  738,  694,  762,  761,  763,  764,  807,  747,  736,
      809,  626,  835,  834,  645,  732,  833,  777,  796,  676,
      748,  749,  694,  727,  784,  647,  741,  694,  718,  765,
      832,  694,  505,  831,  805,  737,  729,  717,  781,  783,
      625,  475,  804,  706,  681,  824,  739,  823,  488,  646,
      822,  475,  716,  780,  687,  603,  821,  740,  694,  617,
      801,  745,  820,  709,  800,    0, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184,  -20, 1184, 1184,    0,
      -42,  406, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  563,    0,    0,    0,    0,
        0,    0,    0,    0,  -26,    0,    0,    0,    0,    0,
     1184,  -26,  -26,  -26, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1184, 1184, 1184, 1184, 1184, 1184,
     1184,    0,    0,    0,    0,    0,    0, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184,    0,    0, 1184,    0,
        0,    0,    0,    0,    0,    0, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184,    0,    0,    0,    0, 1184, 1184,
        0,    0,    0,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  406,  406,  -26,
      -26,  -26,  406,  406,  406,  406,  -26,  406,  406,  -26,
      406,  406,  -26,  406,  406,    0,  406,  406,  -26,  -26,
      689,  689,  689,  689,  -26,  -26, 1184,  247,  247,  247,
      247,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  -26,  -26,  -26,  -26,  247,  247,  247,  247,  689,
      689,  689,  689,  -26,  -26,  247,    0,    0,    0,    0,
        0,    0,  563,  563,  563,    0,    0,    0,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  689,  689,
      689,  689,  689,  689,  689,  689,  563,  563,  563,  563,
      689,  689,  689,  689,  689,  689,  689,  689,  563,  563,
      563,  563,  689,  689,  563,  563,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  563,  563,  563,  563,  563,
      563,  -42,  542,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  542,  694,    0,  540,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  806,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  694,    0,    0,
      694,    0,    0,  806,    0,  806,  694,    0,  694,  806,
      806,  731,    0,  806,  694,  806,  806,  806,  806,  806,
      806,    0,    0,  759,    0,    0,  488,    0,    0,    0,
      488,  615,  615,    0,    0,    0,    0,  611,  505,  582,
        0,    0,  582,    0,  611,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  563
  ];

  private static $yydefault = [
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,  627,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,  559,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,  236,
      558,  237,  447,  559,  238,   64,  449,  566,32767,  448,
      151,  239,  153,  155,32767,  240,  241,   68,32767,32767,
    32767,32767,32767,  627,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,  271,  272,  273,
      274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
      284,  285,  270,  259,  332,  333,  334,  335,  336,  337,
      338,  339,  340,  341,  342,  343,  344,  345,  346,  331,
      320,  353,  290,  351,  395,  396,  397,  398,  399,  400,
      401,  402,  403,  404,  405,  406,  407,  408,  409,  394,
      384,  289,  350,  416,  414,  413,  257,  318,  258,  319,
      382,  256,  317,  383,  250,  311,  381,  251,  312,  375,
      249,  310,  376,  374,  262,  263,  323,  324,  387,  388,
    32767,   44,   45,   45,   45,  264,  254,  255,  253,  252,
      325,  315,  316,  313,  314,  379,  380,  377,  378,   44,
       44,   44,   44,  260,  261,  321,  322,  385,  386,   44,
      242,  243,  248,  303,  304,  309,  367,  368,  373,   44,
       44,   45,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,  244,  245,  246,  247,  305,  306,  307,  308,
      369,  370,  371,  372,  293,  292,  295,  294,  355,  354,
      357,  356,  418,  417,  420,  419,  140,  138,  144,  142,
       59,32767,32767,32767,32767,32767,32767,32767,32767,  296,
      297,  358,  359,  421,  422,32767,32767,32767,  157,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,  158,32767,32767,
    32767,32767,32767,32767,32767,  469,  470,32767,32767,32767,
    32767,32767,32767,  459,32767,32767,  170,32767,  171,32767,
      298,   80,  360,32767,32767,32767,   77,32767,  423,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
       40,32767,32767,32767,32767,   32,32767,32767,32767,32767,
      211,  196,  430,  431,  432,  433,  434,  201,  435,  436,
      437,  438,  439,32767,32767,32767,32767,  626,32767,32767,
      626,32767,32767,32767,32767,  212,32767,  197,32767,   86,
    32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,  453,  459,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,   43,32767,32767,32767,32767,32767,32767,   30,
    32767,   63,32767,32767,32767,32767,32767,32767,32767,32767,
    32767,32767,  462,32767,32767,  459,32767,  159,32767,32767,
    32767,   85,   81,32767,32767,32767,32767,32767,32767,32767,
       67,  132,32767,32767,  218,32767,32767,32767,   60,  152,
    32767,  131,32767,32767,32767,  154,32767,32767,   90,   87,
    32767,32767,32767,32767,32767,  457
  ];

  private static $yygoto = [
       28,   52,   54,   53,   54,   52,   30,  671,   34,   35,
       37,   38,   39,   40,   27,  414,  415,  416,  417,  439,
      440,   31,   15,   32,  301,  418,  419,  420,  421,  441,
      442,   50,   33,   51,  267,  268,  269,  270,  271,  272,
      273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
      283,  326,  328,  331,  334,  337,  340,  344,  345,  355,
      356,  357,  358,  359,  373,  374,  380,  381,  402,  403,
      404,  405,  382,   36,  284,  285,  286,  287,  288,  289,
      290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
      300,  327,  329,  332,  335,  338,  341,  346,  347,  360,
      361,  362,  363,  364,  375,  376,  383,  384,  406,  407,
      408,  409,  385,  552,  553,  554,  555,  556,  787,  616,
      633,  787,  890,  855,  694,   55,  302,   56,  426,   57,
      303,  648,  534,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,    9,  967,  967,  630,  650,  662,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      932,  933,  992,  993,  994, 1055, 1056, 1057,  676, 1231,
       41,   42,  695,   43,   44,  321,   59,   60,  427,  322,
      528,  528,  528,  528, 1223,  528,  528,  546,   61,   45,
       62,   46, 1214, 1112,   63,   47,   48, 1092,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592, 1233,  592,
      592, 1233, 1137, 1212,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  627,  713,  713,  713,  618,  744,
      654,  750,  957, 1213,  794,  794,  794,  794, 1216,  794,
      794, 1081,  760, 1234,  778,  651, 1234,  535, 1081, 1081,
     1081,  353,   17,  728,   18,  607,  732,  815,  542,  625,
      634,  501,  705,  625,  713,   20, 1093,  620,  504,  500,
      602,  627,  602,  631,  631,  602,  658,  602,  631,  631,
      631,  658,  510,  548,  512,  755,  737,  518,  640,  470,
      789,  789,  789,  789,  657,  789,  789,  886,  883,  871,
      603,  551,  849,  834,  866,  869,  832,  829,  830,  831,
      833, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1229,  839,
      880,  865,    0,    0, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092,  764,    0, 1092,    0,  640,  737,  737,
        0,  640,  738, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092,  764,  764,  764,  764, 1092, 1092,    0,    0,    0,
     1093, 1093, 1093, 1093, 1093, 1093, 1093,    0,    0,    0,
        0,    0,    0, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093,    0,    0, 1093,    0,    0,    0,    0,    0,
        0,    0, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
        0,    0,    0,    0, 1093, 1093,    0,    0,  519,    0,
      793,  793,  793,  793,    0,  793,  793,    0,  792,  792,
      792,  792,    0,  792,  792,    0,    0, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081,    0,    0, 1081, 1081, 1081,    0,
        0,  952,    0, 1081,    0,  446, 1081,    0,  490, 1081,
     1076,    0, 1081,    0,    0, 1081, 1081, 1076, 1076, 1076,
        0, 1081, 1081,  446,  446,  446,  446,    0,  354,  739,
      739,  739,  739,  498,    0,    0,    0,    0, 1081, 1081,
     1081, 1081, 1215,  498,  499,    0,  354,  354,  354,  354,
     1081, 1081,    0,    0,    0,    0,  391,    0,    0, 1081,
     1081, 1081,  517,    0,    0,    0,  391,  391,    0,  763,
        0,  520,    0, 1211,  521,  522,  523,  524,    0,  503,
        0,    0,    0, 1081, 1081, 1081, 1081,  763,  763,  763,
      763,    0,    0,    0,    0, 1081, 1081, 1081, 1081,    0,
        0, 1081, 1081,    0,    0,    0,    0,    0,  739,  739,
      739,  739,  739,  739,  739,  739, 1081, 1081,    0,    0,
        0,    0,    0,    0,    0,    0,  503,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  609,    0,
      569,  609,    0,  578,    0,  605,  606,    0,    0,  644,
        0,  545,  644,  545,  966, 1126,  526,  511,  604, 1028,
     1127,  515,  516,  629, 1091,  649,  581,  582,    0,  822,
      707,  885,  660,  581,  582,  661,  549,  664,    0,    0,
        0,    0,    0,  965,    0, 1027,    0,    0,    0,    0,
        0, 1090,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,    0,  968,  968,    0,    0,    0,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      568, 1081, 1081, 1081, 1081, 1081,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076,    0,    0, 1076, 1076, 1076,    0,    0,
        0,    0, 1076,    0,    0, 1076,    0,    0, 1076,    0,
        0, 1076,    0,    0, 1076, 1076,  642,  645,    0,    0,
     1076, 1076,    0,    0,    0,  762,    0,    0,    0,    0,
        0,    0,    0,  761,    0,    0,    0, 1076, 1076, 1076,
     1076,    0,    0,  762,  762,  762,  762,    0,    0, 1076,
     1076,  761,  761,  761,  761,    0,    0,    0, 1076, 1076,
     1076,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1076, 1076, 1076, 1076,    0,    0,    0,    0,
        0,    0,    0,    0, 1076, 1076, 1076, 1076,    0,    0,
     1076, 1076,    0,    0,  323,  422,  423,  424,  425,  443,
      444,    0,    0,    0,    0, 1076, 1076,   58,  304,  305,
      306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
      316,  317,  318,  319,  320,  330,  333,  336,  339,  342,
      343,  348,  349,  365,  366,  367,  368,  377,  378,  386,
      387,  410,  411,  412,  413,  388,    0,    0,   66,    0,
        0,    0,    0,  799,    0,    0,  558,  559,  560,  561,
      562,  428,   67,  324,    0,    0,    0,    0,  429,  325,
      842,    0,  835,    0,    0,    0,  805,  872,    0,    0,
      803,    0,  809,  807,  770,  772,  769,  767,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1076, 1076, 1076, 1076, 1076,    0,    0,  506,    0,    0,
        0,  843,    0,    0,    0,  876,    0,    0,    0,    0,
        0,    0,  655,    0,    0,    0,    0,    0,  875,  873,
      874
  ];

  private static $yygcheck = [
       20,   20,   20,   20,   20,   20,   20,    4,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   23,    2,
        2,   23,   93,   23,   23,   20,   20,   20,   20,   20,
       20,   34,   34,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   57,   98,   98,   44,   44,   44,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       96,   96,   96,   96,   96,   96,   96,   96,    7,  115,
       20,   20,    7,   20,   20,   20,   20,   20,   20,   20,
       30,   30,   30,   30,  112,   30,   30,   74,   20,   20,
       20,   20,  106,  103,   20,   20,   20,   98,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  104,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   32,   32,   32,   30,   45,
       45,   45,   97,  105,   17,   17,   17,   17,  107,   17,
       17,   97,   51,   78,   56,   37,   78,   41,   97,   97,
       97,   31,   68,   35,   68,   68,   38,   64,   47,   24,
       68,    5,   29,   24,   32,   68,  100,   21,    5,   27,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   28,    5,   49,   36,    5,   36,    5,
       19,   19,   19,   19,   25,   19,   19,   91,   90,   86,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   98,   98,   98,   98,   98,   98,   98,  111,   76,
       88,   84,   -1,   -1,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   10,   -1,   98,   -1,   36,   36,   36,
       -1,   36,   36,   98,   98,   98,   98,   98,   98,   98,
       98,   10,   10,   10,   10,   98,   98,   -1,   -1,   -1,
      100,  100,  100,  100,  100,  100,  100,   -1,   -1,   -1,
       -1,   -1,   -1,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,   -1,   -1,  100,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,  100,  100,  100,  100,  100,  100,  100,  100,
       -1,   -1,   -1,   -1,  100,  100,   -1,   -1,   53,   -1,
       16,   16,   16,   16,   -1,   16,   16,   -1,   15,   15,
       15,   15,   -1,   15,   15,   -1,   -1,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   -1,   -1,   97,   97,   97,   -1,
       -1,   67,   -1,   97,   -1,   30,   97,   -1,   53,   97,
       67,   -1,   97,   -1,   -1,   97,   97,   67,   67,   67,
       -1,   97,   97,   30,   30,   30,   30,   -1,   31,   24,
       24,   24,   24,   30,   -1,   -1,   -1,   -1,   97,   97,
       97,   97,  100,   30,   30,   -1,   31,   31,   31,   31,
       97,   97,   -1,   -1,   -1,   -1,   31,   -1,   -1,   97,
       97,   97,   53,   -1,   -1,   -1,   31,   31,   -1,   17,
       -1,   53,   -1,   78,   53,   53,   53,   53,   -1,   24,
       -1,   -1,   -1,   97,   97,   97,   97,   17,   17,   17,
       17,   -1,   -1,   -1,   -1,   97,   97,   97,   97,   -1,
       -1,   97,   97,   -1,   -1,   -1,   -1,   -1,   24,   24,
       24,   24,   24,   24,   24,   24,   97,   97,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   24,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   24,   -1,
       24,   24,   -1,   24,   -1,   24,   24,   -1,   -1,   24,
       -1,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   -1,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   -1,   -1,
       -1,   -1,   -1,   97,   -1,   97,   -1,   -1,   -1,   -1,
       -1,   97,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   -1,   99,   99,   -1,   -1,   -1,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       78,   97,   97,   97,   97,   97,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   -1,   -1,   67,   67,   67,   -1,   -1,
       -1,   -1,   67,   -1,   -1,   67,   -1,   -1,   67,   -1,
       -1,   67,   -1,   -1,   67,   67,   78,   78,   -1,   -1,
       67,   67,   -1,   -1,   -1,   16,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   15,   -1,   -1,   -1,   67,   67,   67,
       67,   -1,   -1,   16,   16,   16,   16,   -1,   -1,   67,
       67,   15,   15,   15,   15,   -1,   -1,   -1,   67,   67,
       67,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   67,   67,   67,   67,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   67,   67,   67,   67,   -1,   -1,
       67,   67,   -1,   -1,   39,   39,   39,   39,   39,   39,
       39,   -1,   -1,   -1,   -1,   67,   67,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   -1,   -1,   39,   -1,
       -1,   -1,   -1,   54,   -1,   -1,   39,   39,   39,   39,
       39,   39,   39,   39,   -1,   -1,   -1,   -1,   39,   39,
       54,   -1,   54,   -1,   -1,   -1,   54,   54,   -1,   -1,
       54,   -1,   54,   54,   54,   54,   54,   54,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
       67,   67,   67,   67,   67,   -1,   -1,   54,   -1,   -1,
       -1,   54,   -1,   -1,   -1,   54,   -1,   -1,   -1,   -1,
       -1,   -1,   67,   -1,   -1,   -1,   -1,   -1,   54,   54,
       54
  ];

  private static $yygbase = [
        0,    0,  117,    0,    3, -167,    0,  167,    0,    0,
       22,    0,    0,    0,    0,  482,  474,  238,    0,  294,
      -70, -186,    0,  112,  198, -171,    0, -175, -156, -180,
      174,  197, -117,    0, -299, -172,  -55, -177, -170,  716,
        0, -176,    0,    0, -223, -216,    0, -183,    0, -163,
        0, -120,    0,   13,  473,    0, -135,  135,    0,    0,
        0,    0,    0,    0, -181,    0,    0,  472, -301,    0,
        0,    0,    0,    0,  113,    0, -179,    0,  243,    0,
        0,    0,    0,    0, -246,    0, -199,    0, -245,    0,
     -166, -198,    0,  115,    0,    0, -233,  193,  133,  712,
      212,    0,    0,  118, -137, -107, -158, -102,    0,    0,
        0, -242,  111,    0,    0,  156,    0
  ];

  private static $yygdefault = [
    -32768,  590,  668,  669,  670,  591,    1,  675,  677,  679,
      680,  681,  682,  683,  684,  685,  686,  687,  688,  690,
       29,  529,  791,  786, 1125,  646,  699,  540,  541,  704,
      469,  352,  712,  647,  530,  727,  611,  641,  731,   65,
      740,  536,  579,  547,  656,  749,  531,  632,  659,  754,
      372,  759,  765,  513,  826,  379,  779,    6,  788,  532,
      533, 1031, 1094,  538,  814,  487,  539, 1013, 1122,  557,
      828,  502,   72,   74,  543,  508,  838,  574, 1121,  472,
      856,  858,  859,  577,  864,  868,  870,  575,  879,  544,
      882,  887,    7,  889,  525,   49,  931, 1018, 1029, 1032,
     1030, 1095,  537, 1111, 1116, 1117, 1118, 1120,  593,  595,
      567, 1221, 1222,  613,  570, 1230,  614
  ];

  private static $yylhs = [
        0,    1,    1,    2,    2,    3,    3,    3,    4,    6,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,   18,   18,    9,   22,   14,
       21,   21,   25,   25,   25,    8,    8,    8,   28,   28,
       29,   29,   29,   27,   30,   30,   31,   31,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   10,   33,
       33,   34,   34,   35,   35,   37,   37,   38,   38,   40,
       40,   41,   41,   36,   36,   11,   11,   42,   42,   42,
       46,   46,   46,   47,   47,   45,   43,   43,   48,   48,
       49,   44,   44,   50,   50,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   52,
       52,   52,   55,   55,   56,   56,   12,   12,   13,   13,
       57,   57,   23,   23,   23,   23,   58,   58,   58,   16,
       17,   59,   60,   15,   15,   15,   15,   61,   61,   61,
       61,   62,   62,   62,   62,   53,   53,   53,   63,   63,
       64,   64,   64,   64,   64,   64,   64,   66,   66,   65,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   73,   72,   72,   72,   69,   69,   83,   83,
       84,   70,   70,   85,   75,   75,   86,   86,   86,   86,
       76,   77,   77,   87,   87,   88,   89,   89,   90,   90,
       79,   79,   91,   92,   92,   93,   93,   54,   54,   54,
       80,   80,   81,   81,   82,   82,   94,   94,   74,   74,
       71,   71,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       99,   99,   99,   99,   99,  101,  101,  101,  101,  101,
       68,   68,   97,   97,   97,  102,  102,  103,  103,  103,
       98,   98,   98,   98,   98,   98,   98,  108,  105,    5,
        5,    5,   96,   96,   96,   96,   96,   96,   24,   24,
       24,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,   78,  104,  104,  104,   26,   26,   26,   26,   26,
       26,  106,  106,  106,  106,  109,  110,  110,  112,  112,
      100,  100,  100,  113,  114,  114,  115,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  111,  111
  ];

  private static $yylen = [
        1,    0,    1,    1,    1,    4,    5,    4,    1,    1,
        2,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    4,    4,    4,
        1,    4,    1,    3,    4,    3,    5,    5,    1,    3,
        1,    3,    4,    1,    0,    1,    1,    2,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    0,
        1,    1,    3,    1,    3,    1,    3,    1,    3,    3,
        3,    1,    3,    1,    1,    8,    6,    0,    2,    3,
        0,    2,    3,    1,    3,    1,    0,    2,    1,    3,
        1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    6,    4,    6,    4,    3,
        5,    5,    1,    2,    3,    6,    5,    3,    6,    4,
        1,    2,    1,    1,    3,    1,    1,    1,    1,    4,
        3,    3,    2,    5,    7,    5,    4,    4,    5,    3,
        4,    4,    5,    3,    4,    2,    3,    3,    1,    3,
        1,    3,    2,    4,    3,    5,    3,    0,    1,    1,
        1,    5,    5,    7,    7,    7,    6,    7,    5,    2,
        2,    3,    3,    4,    5,    3,    2,    3,    2,    3,
        2,    3,    3,    3,    3,    3,    5,    5,    3,    3,
        1,    2,    1,    1,    2,    2,    0,    1,    1,    2,
        3,    0,    1,    2,    1,    2,    2,    5,    7,    5,
        2,    0,    1,    1,    2,    3,    1,    3,    1,    3,
        1,    2,    2,    1,    2,    3,    2,    2,    3,    3,
        2,    1,    2,    1,    2,    1,    1,    3,    1,    3,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    2,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    2,    4,    4,    5,
        4,    2,    2,    2,    2,    2,    2,    2,    2,    3,
        2,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    2,    4,    4,
        5,    4,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    2,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    2,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        2,    4,    4,    5,    4,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    2,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        3,    3,    2,    3,    3,    1,    3,    1,    3,    2,
        1,    1,    1,    1,    1,    1,    1,    0,    3,    1,
        2,    3,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    9,    3,    3,    2,    1,    3,    2,    1,
        2,    3,    3,    2,    1,    3,    3,    1,    1,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    0,    1
  ];
  
  private static $yyproduction = [
    "start : start",
    "start : /* empty */",
    "start : unit",
    "unit : module",
    "unit : program",
    "module : T_MODULE name ';' program",
    "module : T_MODULE name '{' unit '}'",
    "module : T_MODULE '{' unit '}'",
    "program : toplvl",
    "toplvl : topex",
    "toplvl : toplvl topex",
    "topex : use_decl",
    "topex : '@' error T_NL",
    "topex : attr_decl",
    "topex : enum_decl",
    "topex : class_decl",
    "topex : trait_decl",
    "topex : iface_decl",
    "topex : topex_attr",
    "topex : fn_decl",
    "topex : let_decl",
    "topex : var_decl",
    "topex : require",
    "topex : T_END",
    "topex : stmt",
    "require : T_REQUIRE rxpr ';'",
    "require : T_REQUIRE T_PHP rxpr ';'",
    "attr_decl : '@' attr_def ';' T_NL",
    "comp_attr : '@' attr_def T_NL comp",
    "topex_attr : '@' attr_def T_NL topex",
    "attr_def : ident",
    "attr_def : ident '(' attr_val ')'",
    "attr_val : ident",
    "attr_val : ident '=' lit",
    "attr_val : ident '(' attr_val ')'",
    "use_decl : T_USE use_name ';'",
    "use_decl : T_USE use_name T_AS ident ';'",
    "use_decl : T_USE use_name '{' use_items '}'",
    "use_items : use_item",
    "use_items : use_items ',' use_item",
    "use_item : use_name",
    "use_item : use_name T_AS ident",
    "use_item : use_name '{' use_items '}'",
    "use_name : name",
    "mods_opt : /* empty */",
    "mods_opt : mods",
    "mods : mod",
    "mods : mods mod",
    "mod : T_CONST",
    "mod : T_FINAL",
    "mod : T_GLOBAL",
    "mod : T_STATIC",
    "mod : T_PUBLIC",
    "mod : T_PRIVATE",
    "mod : T_PROTECTED",
    "mod : T_SEALED",
    "mod : T_INLINE",
    "mod : T_EXTERN",
    "enum_decl : mods_opt T_ENUM '{' vars_opt '}'",
    "vars_opt : /* empty */",
    "vars_opt : vars",
    "vars : var",
    "vars : vars ',' var",
    "var : destr_item",
    "var : destr_item '=' rxpr",
    "vars_noin : var_noin",
    "vars_noin : vars_noin ',' var_noin",
    "var_noin : destr_item",
    "var_noin : destr_item '=' rxpr_noin",
    "destr : '[' destr_items ']'",
    "destr : '{' destr_items '}'",
    "destr_items : destr_item",
    "destr_items : destr_items ',' destr_item",
    "destr_item : ident",
    "destr_item : destr",
    "class_decl : mods_opt T_CLASS ident ext_opt impl_opt '{' members_opt '}'",
    "class_decl : mods_opt T_CLASS ident ext_opt impl_opt ';'",
    "ext_opt : /* empty */",
    "ext_opt : ':' ext",
    "ext_opt : '(' ext ')'",
    "exts_opt : /* empty */",
    "exts_opt : ':' exts",
    "exts_opt : '(' exts ')'",
    "exts : ext",
    "exts : exts ',' ext",
    "ext : name",
    "impl_opt : /* empty */",
    "impl_opt : '~' impls",
    "impls : impl",
    "impls : impls ',' impl",
    "impl : name",
    "members_opt : /* empty */",
    "members_opt : members",
    "members : member",
    "members : members member",
    "member : fn_decl",
    "member : let_decl",
    "member : var_decl",
    "member : enum_decl",
    "member : trait_usage",
    "member : mods_opt T_NEW pparams ';'",
    "member : mods_opt T_NEW pparams block",
    "member : mods_opt T_DEL pparams ';'",
    "member : mods_opt T_DEL pparams block",
    "member : T_GET ident pparams block",
    "member : T_GET ident pparams T_ARR rxpr ';'",
    "member : T_SET ident pparams block",
    "member : T_SET ident pparams T_ARR rxpr ';'",
    "member : mods '{' members_opt '}'",
    "trait_usage : T_USE name ';'",
    "trait_usage : T_USE name T_AS ident ';'",
    "trait_usage : T_USE name '{' trait_usage_items '}'",
    "trait_usage_items : trait_usage_item",
    "trait_usage_items : trait_usage_items trait_usage_item",
    "trait_usage_item : mods_opt ident ';'",
    "trait_usage_item : mods_opt ident T_AS mods_opt ident ';'",
    "trait_decl : T_TRAIT ident '{' members_opt '}'",
    "trait_decl : T_TRAIT ident ';'",
    "iface_decl : T_IFACE ident exts_opt '{' members_opt '}'",
    "iface_decl : T_IFACE ident exts_opt ';'",
    "inner : comp",
    "inner : inner comp",
    "comp : decl",
    "comp : stmt",
    "comp : '@' error T_NL",
    "comp : comp_attr",
    "decl : fn_decl",
    "decl : let_decl",
    "decl : var_decl",
    "let_decl : mods_opt T_LET vars ';'",
    "var_decl : mods vars ';'",
    "let_decl_noin_nosemi : mods_opt T_LET vars_noin",
    "var_decl_noin_nosemi : mods vars_noin",
    "fn_decl : mods_opt T_FN ident pparams block",
    "fn_decl : mods_opt T_FN ident pparams T_ARR rxpr ';'",
    "fn_decl : mods_opt T_FN ident pparams ';'",
    "fn_decl : mods_opt T_FN ident ';'",
    "fn_expr : T_FN ident pparams block",
    "fn_expr : T_FN ident pparams T_ARR rxpr",
    "fn_expr : T_FN pparams block",
    "fn_expr : T_FN pparams T_ARR rxpr",
    "fn_expr_noin : T_FN ident pparams block",
    "fn_expr_noin : T_FN ident pparams T_ARR rxpr_noin",
    "fn_expr_noin : T_FN pparams block",
    "fn_expr_noin : T_FN pparams T_ARR rxpr_noin",
    "pparams : '(' ')'",
    "pparams : '(' error ')'",
    "pparams : '(' params ')'",
    "params : param",
    "params : params ',' param",
    "param : ident",
    "param : ident '=' rxpr",
    "param : hint ident",
    "param : hint ident '=' rxpr",
    "param : hint_opt T_THIS dot_ident",
    "param : hint_opt T_THIS dot_ident '=' rxpr",
    "param : hint_opt T_REST ident",
    "hint_opt : /* empty */",
    "hint_opt : hint",
    "hint : name",
    "stmt : block",
    "stmt : T_DO stmt T_WHILE pxpr ';'",
    "stmt : T_IF pxpr stmt elsifs_opt else_opt",
    "stmt : T_FOR '(' let_decl_noin_nosemi T_IN rxpr ')' stmt",
    "stmt : T_FOR '(' var_decl_noin_nosemi T_IN rxpr ')' stmt",
    "stmt : T_FOR '(' rseq_noin T_IN rxpr ')' stmt",
    "stmt : T_FOR '(' for_expr_noin for_expr ')' stmt",
    "stmt : T_FOR '(' for_expr_noin for_expr rseq ')' stmt",
    "stmt : T_FOR '(' error ')' stmt",
    "stmt : T_FOR block",
    "stmt : T_TRY block",
    "stmt : T_TRY block catches",
    "stmt : T_TRY block finally",
    "stmt : T_TRY block catches finally",
    "stmt : T_PHP '{' php_usage_opt str '}'",
    "stmt : T_GOTO ident ';'",
    "stmt : T_TEST block",
    "stmt : T_TEST str block",
    "stmt : T_BREAK ';'",
    "stmt : T_BREAK ident ';'",
    "stmt : T_CONTINUE ';'",
    "stmt : T_CONTINUE ident ';'",
    "stmt : T_THROW rxpr ';'",
    "stmt : T_WHILE pxpr stmt",
    "stmt : T_YIELD rxpr ';'",
    "stmt : T_ASSERT rxpr ';'",
    "stmt : T_ASSERT rxpr ':' str ';'",
    "stmt : T_SWITCH pxpr '{' cases '}'",
    "stmt : T_RETURN rxpr ';'",
    "stmt : ident ':' comp",
    "stmt : lxpr_stmt",
    "stmt : error ';'",
    "for_expr : rxpr_stmt",
    "for_expr_noin : rxpr_stmt_noin",
    "for_expr_noin : let_decl_noin_nosemi ';'",
    "for_expr_noin : var_decl_noin_nosemi ';'",
    "elsifs_opt : /* empty */",
    "elsifs_opt : elsifs",
    "elsifs : elsif",
    "elsifs : elsifs elsif",
    "elsif : T_ELSIF pxpr stmt",
    "else_opt : /* empty */",
    "else_opt : else",
    "else : T_ELSE stmt",
    "catches : catch",
    "catches : catches catch",
    "catch : T_CATCH block",
    "catch : T_CATCH '(' name ')' block",
    "catch : T_CATCH '(' name ':' ident ')' block",
    "catch : T_CATCH '(' error ')' block",
    "finally : T_FINALLY block",
    "php_usage_opt : /* empty */",
    "php_usage_opt : php_usage",
    "php_usage : php_use",
    "php_usage : php_usage php_use",
    "php_use : T_USE php_use_items ';'",
    "php_use_items : php_use_item",
    "php_use_items : php_use_items ',' php_use_item",
    "php_use_item : ident",
    "php_use_item : ident T_AS ident",
    "cases : case",
    "cases : cases case",
    "case : casels inner",
    "casels : casel",
    "casels : casels casel",
    "casel : T_CASE rxpr ':'",
    "casel : T_DEFAULT ':'",
    "block : '{' '}'",
    "block : '{' inner '}'",
    "block : '{' error '}'",
    "lxpr_stmt : lseq ';'",
    "lxpr_stmt : ';'",
    "rxpr_stmt : rseq ';'",
    "rxpr_stmt : ';'",
    "rxpr_stmt_noin : rseq_noin ';'",
    "rxpr_stmt_noin : ';'",
    "lseq : lxpr",
    "lseq : lseq ',' rxpr",
    "rseq : rxpr",
    "rseq : rseq ',' rxpr",
    "rseq_noin : rxpr_noin",
    "rseq_noin : rseq_noin ',' rxpr_noin",
    "lxpr : lxpr '+' rxpr",
    "lxpr : lxpr '-' rxpr",
    "lxpr : lxpr '*' rxpr",
    "lxpr : lxpr '/' rxpr",
    "lxpr : lxpr '%' rxpr",
    "lxpr : lxpr T_POW rxpr",
    "lxpr : lxpr '~' rxpr",
    "lxpr : lxpr '&' rxpr",
    "lxpr : lxpr '|' rxpr",
    "lxpr : lxpr '^' rxpr",
    "lxpr : lxpr '<' rxpr",
    "lxpr : lxpr '>' rxpr",
    "lxpr : lxpr T_GTE rxpr",
    "lxpr : lxpr T_LTE rxpr",
    "lxpr : lxpr T_BOOL_AND rxpr",
    "lxpr : lxpr T_BOOL_OR rxpr",
    "lxpr : lxpr T_BOOL_XOR rxpr",
    "lxpr : lxpr T_RANGE rxpr",
    "lxpr : lxpr T_SL rxpr",
    "lxpr : lxpr T_SR rxpr",
    "lxpr : lxpr T_EQ rxpr",
    "lxpr : lxpr T_NEQ rxpr",
    "lxpr : lxpr T_IN rxpr",
    "lxpr : lxpr T_IS type",
    "lxpr : lxpr T_ISNT type",
    "lxpr : lxpr T_AS type",
    "lxpr : lxpr T_INC",
    "lxpr : lxpr T_DEC",
    "lxpr : lxpr '=' rxpr",
    "lxpr : lxpr T_APLUS rxpr",
    "lxpr : lxpr T_AMINUS rxpr",
    "lxpr : lxpr T_AMUL rxpr",
    "lxpr : lxpr T_ADIV rxpr",
    "lxpr : lxpr T_AMOD rxpr",
    "lxpr : lxpr T_APOW rxpr",
    "lxpr : lxpr T_ABIT_NOT rxpr",
    "lxpr : lxpr T_ABIT_OR rxpr",
    "lxpr : lxpr T_ABIT_AND rxpr",
    "lxpr : lxpr T_ABIT_XOR rxpr",
    "lxpr : lxpr T_ABOOL_OR rxpr",
    "lxpr : lxpr T_ABOOL_AND rxpr",
    "lxpr : lxpr T_ABOOL_XOR rxpr",
    "lxpr : lxpr T_ASHIFT_L rxpr",
    "lxpr : lxpr T_ASHIFT_R rxpr",
    "lxpr : lxpr dot_ident",
    "lxpr : lxpr '[' rxpr ']'",
    "lxpr : lxpr '[' error ']'",
    "lxpr : lxpr '?' rxpr ':' rxpr",
    "lxpr : lxpr '?' ':' rxpr",
    "lxpr : lxpr pargs",
    "lxpr : '-' rxpr",
    "lxpr : '+' rxpr",
    "lxpr : '~' rxpr",
    "lxpr : '!' rxpr",
    "lxpr : T_INC rxpr",
    "lxpr : T_DEC rxpr",
    "lxpr : T_NEW name",
    "lxpr : T_NEW name pargs",
    "lxpr : T_DEL ident",
    "lxpr : atom",
    "lxpr : legacy_cast",
    "rxpr : rxpr '+' rxpr",
    "rxpr : rxpr '-' rxpr",
    "rxpr : rxpr '*' rxpr",
    "rxpr : rxpr '/' rxpr",
    "rxpr : rxpr '%' rxpr",
    "rxpr : rxpr T_POW rxpr",
    "rxpr : rxpr '~' rxpr",
    "rxpr : rxpr '&' rxpr",
    "rxpr : rxpr '|' rxpr",
    "rxpr : rxpr '^' rxpr",
    "rxpr : rxpr '>' rxpr",
    "rxpr : rxpr '<' rxpr",
    "rxpr : rxpr T_GTE rxpr",
    "rxpr : rxpr T_LTE rxpr",
    "rxpr : rxpr T_BOOL_AND rxpr",
    "rxpr : rxpr T_BOOL_OR rxpr",
    "rxpr : rxpr T_BOOL_XOR rxpr",
    "rxpr : rxpr T_RANGE rxpr",
    "rxpr : rxpr T_SL rxpr",
    "rxpr : rxpr T_SR rxpr",
    "rxpr : rxpr T_EQ rxpr",
    "rxpr : rxpr T_NEQ rxpr",
    "rxpr : rxpr T_IN rxpr",
    "rxpr : rxpr T_IS type",
    "rxpr : rxpr T_ISNT type",
    "rxpr : rxpr T_AS type",
    "rxpr : rxpr T_INC",
    "rxpr : rxpr T_DEC",
    "rxpr : rxpr '=' rxpr",
    "rxpr : rxpr T_APLUS rxpr",
    "rxpr : rxpr T_AMINUS rxpr",
    "rxpr : rxpr T_AMUL rxpr",
    "rxpr : rxpr T_ADIV rxpr",
    "rxpr : rxpr T_AMOD rxpr",
    "rxpr : rxpr T_APOW rxpr",
    "rxpr : rxpr T_ABIT_NOT rxpr",
    "rxpr : rxpr T_ABIT_OR rxpr",
    "rxpr : rxpr T_ABIT_AND rxpr",
    "rxpr : rxpr T_ABIT_XOR rxpr",
    "rxpr : rxpr T_ABOOL_OR rxpr",
    "rxpr : rxpr T_ABOOL_AND rxpr",
    "rxpr : rxpr T_ABOOL_XOR rxpr",
    "rxpr : rxpr T_ASHIFT_L rxpr",
    "rxpr : rxpr T_ASHIFT_R rxpr",
    "rxpr : rxpr dot_ident",
    "rxpr : rxpr '[' rxpr ']'",
    "rxpr : rxpr '[' error ']'",
    "rxpr : rxpr '?' rxpr ':' rxpr",
    "rxpr : rxpr '?' ':' rxpr",
    "rxpr : rxpr pargs",
    "rxpr : T_YIELD rxpr",
    "rxpr : '-' rxpr",
    "rxpr : '+' rxpr",
    "rxpr : '~' rxpr",
    "rxpr : '!' rxpr",
    "rxpr : T_INC rxpr",
    "rxpr : T_DEC rxpr",
    "rxpr : T_NEW name",
    "rxpr : T_NEW name pargs",
    "rxpr : T_DEL ident",
    "rxpr : atom",
    "rxpr : obj",
    "rxpr : fn_expr",
    "rxpr : legacy_cast",
    "rxpr_noin : rxpr_noin '+' rxpr_noin",
    "rxpr_noin : rxpr_noin '-' rxpr_noin",
    "rxpr_noin : rxpr_noin '*' rxpr_noin",
    "rxpr_noin : rxpr_noin '/' rxpr_noin",
    "rxpr_noin : rxpr_noin '%' rxpr_noin",
    "rxpr_noin : rxpr_noin T_POW rxpr_noin",
    "rxpr_noin : rxpr_noin '~' rxpr_noin",
    "rxpr_noin : rxpr_noin '&' rxpr_noin",
    "rxpr_noin : rxpr_noin '|' rxpr_noin",
    "rxpr_noin : rxpr_noin '^' rxpr_noin",
    "rxpr_noin : rxpr_noin '>' rxpr_noin",
    "rxpr_noin : rxpr_noin '<' rxpr_noin",
    "rxpr_noin : rxpr_noin T_GTE rxpr_noin",
    "rxpr_noin : rxpr_noin T_LTE rxpr_noin",
    "rxpr_noin : rxpr_noin T_BOOL_AND rxpr_noin",
    "rxpr_noin : rxpr_noin T_BOOL_OR rxpr_noin",
    "rxpr_noin : rxpr_noin T_BOOL_XOR rxpr_noin",
    "rxpr_noin : rxpr_noin T_RANGE rxpr_noin",
    "rxpr_noin : rxpr_noin T_SL rxpr_noin",
    "rxpr_noin : rxpr_noin T_SR rxpr_noin",
    "rxpr_noin : rxpr_noin T_EQ rxpr_noin",
    "rxpr_noin : rxpr_noin T_NEQ rxpr_noin",
    "rxpr_noin : rxpr_noin T_IS type",
    "rxpr_noin : rxpr_noin T_ISNT type",
    "rxpr_noin : rxpr_noin T_AS type",
    "rxpr_noin : rxpr_noin T_INC",
    "rxpr_noin : rxpr_noin T_DEC",
    "rxpr_noin : rxpr_noin '=' rxpr_noin",
    "rxpr_noin : rxpr_noin T_APLUS rxpr_noin",
    "rxpr_noin : rxpr_noin T_AMINUS rxpr_noin",
    "rxpr_noin : rxpr_noin T_AMUL rxpr_noin",
    "rxpr_noin : rxpr_noin T_ADIV rxpr_noin",
    "rxpr_noin : rxpr_noin T_AMOD rxpr_noin",
    "rxpr_noin : rxpr_noin T_APOW rxpr_noin",
    "rxpr_noin : rxpr_noin T_ABIT_NOT rxpr_noin",
    "rxpr_noin : rxpr_noin T_ABIT_OR rxpr_noin",
    "rxpr_noin : rxpr_noin T_ABIT_AND rxpr_noin",
    "rxpr_noin : rxpr_noin T_ABIT_XOR rxpr_noin",
    "rxpr_noin : rxpr_noin T_ABOOL_OR rxpr_noin",
    "rxpr_noin : rxpr_noin T_ABOOL_AND rxpr_noin",
    "rxpr_noin : rxpr_noin T_ABOOL_XOR rxpr_noin",
    "rxpr_noin : rxpr_noin T_ASHIFT_L rxpr_noin",
    "rxpr_noin : rxpr_noin T_ASHIFT_R rxpr_noin",
    "rxpr_noin : rxpr_noin dot_ident",
    "rxpr_noin : rxpr_noin '[' rxpr ']'",
    "rxpr_noin : rxpr_noin '[' error ']'",
    "rxpr_noin : rxpr_noin '?' rxpr ':' rxpr_noin",
    "rxpr_noin : rxpr_noin '?' ':' rxpr_noin",
    "rxpr_noin : rxpr_noin pargs",
    "rxpr_noin : T_YIELD rxpr_noin",
    "rxpr_noin : '-' rxpr_noin",
    "rxpr_noin : '+' rxpr_noin",
    "rxpr_noin : '~' rxpr_noin",
    "rxpr_noin : '!' rxpr_noin",
    "rxpr_noin : T_INC rxpr_noin",
    "rxpr_noin : T_DEC rxpr_noin",
    "rxpr_noin : T_NEW name",
    "rxpr_noin : T_NEW name pargs",
    "rxpr_noin : T_DEL ident",
    "rxpr_noin : atom",
    "rxpr_noin : obj",
    "rxpr_noin : fn_expr_noin",
    "rxpr_noin : legacy_cast_noin",
    "legacy_cast : '(' T_TINT ')' rxpr",
    "legacy_cast : '(' T_TBOOL ')' rxpr",
    "legacy_cast : '(' T_TFLOAT ')' rxpr",
    "legacy_cast : '(' T_TSTRING ')' rxpr",
    "legacy_cast : '(' T_TREGEXP ')' rxpr",
    "legacy_cast_noin : '(' T_TINT ')' rxpr_noin",
    "legacy_cast_noin : '(' T_TBOOL ')' rxpr_noin",
    "legacy_cast_noin : '(' T_TFLOAT ')' rxpr_noin",
    "legacy_cast_noin : '(' T_TSTRING ')' rxpr_noin",
    "legacy_cast_noin : '(' T_TREGEXP ')' rxpr_noin",
    "pxpr : '(' rxpr ')'",
    "pxpr : '(' error ')'",
    "pargs : '(' ')'",
    "pargs : '(' error ')'",
    "pargs : '(' args ')'",
    "args : arg",
    "args : args ',' arg",
    "arg : rxpr",
    "arg : ident ':' rxpr",
    "arg : T_REST rxpr",
    "atom : num",
    "atom : reg",
    "atom : arr",
    "atom : name",
    "atom : kwc",
    "atom : str",
    "atom : pxpr",
    "@1 : /* empty */",
    "reg : '/' @1 T_REGEXP",
    "name : ident",
    "name : T_DDDOT ident",
    "name : name T_DDDOT ident",
    "type : name",
    "type : T_TINT",
    "type : T_TBOOL",
    "type : T_TFLOAT",
    "type : T_TSTRING",
    "type : T_TREGEXP",
    "ident : T_IDENT",
    "ident : T_GET",
    "ident : T_SET",
    "dot_ident : '.' ident",
    "dot_ident : '.' T_FN",
    "dot_ident : '.' T_LET",
    "dot_ident : '.' T_PHP",
    "dot_ident : '.' T_TEST",
    "dot_ident : '.' T_ASSERT",
    "dot_ident : '.' T_TRUE",
    "dot_ident : '.' T_FALSE",
    "dot_ident : '.' T_NULL",
    "dot_ident : '.' T_IF",
    "dot_ident : '.' T_ELSIF",
    "dot_ident : '.' T_ELSE",
    "dot_ident : '.' T_TRY",
    "dot_ident : '.' T_THROW",
    "dot_ident : '.' T_CATCH",
    "dot_ident : '.' T_FINALLY",
    "dot_ident : '.' T_USE",
    "dot_ident : '.' T_MODULE",
    "dot_ident : '.' T_EXTERN",
    "dot_ident : '.' T_CLASS",
    "dot_ident : '.' T_TRAIT",
    "dot_ident : '.' T_IFACE",
    "dot_ident : '.' T_THIS",
    "dot_ident : '.' T_STATIC",
    "dot_ident : '.' T_CONST",
    "dot_ident : '.' T_FINAL",
    "dot_ident : '.' T_PUBLIC",
    "dot_ident : '.' T_PRIVATE",
    "dot_ident : '.' T_PROTECTED",
    "dot_ident : '.' T_ENUM",
    "dot_ident : '.' T_SWITCH",
    "dot_ident : '.' T_CASE",
    "dot_ident : '.' T_DEFAULT",
    "dot_ident : '.' T_FOR",
    "dot_ident : '.' T_WHILE",
    "dot_ident : '.' T_DO",
    "dot_ident : '.' T_BREAK",
    "dot_ident : '.' T_CONTINUE",
    "dot_ident : '.' T_RETURN",
    "dot_ident : '.' T_SUPER",
    "dot_ident : '.' T_GOTO",
    "dot_ident : '.' T_REQUIRE",
    "dot_ident : '.' T_YIELD",
    "dot_ident : '.' T_GLOBAL",
    "dot_ident : '.' T_TINT",
    "dot_ident : '.' T_TBOOL",
    "dot_ident : '.' T_TFLOAT",
    "dot_ident : '.' T_TSTRING",
    "dot_ident : '.' T_TREGEXP",
    "dot_ident : '.' T_SEALED",
    "dot_ident : '.' T_INLINE",
    "dot_ident : '.' T_CFILE",
    "dot_ident : '.' T_CLINE",
    "dot_ident : '.' T_CCOLN",
    "dot_ident : '.' T_CFN",
    "dot_ident : '.' T_CCLASS",
    "dot_ident : '.' T_CMETHOD",
    "dot_ident : '.' T_CMODULE",
    "kwc : T_THIS",
    "kwc : T_SUPER",
    "kwc : T_NULL",
    "kwc : T_TRUE",
    "kwc : T_FALSE",
    "kwc : T_CFILE",
    "kwc : T_CLINE",
    "kwc : T_CCOLN",
    "kwc : T_CFN",
    "kwc : T_CCLASS",
    "kwc : T_CMETHOD",
    "kwc : T_CMODULE",
    "str : T_STRING",
    "num : T_LNUM",
    "num : T_DNUM",
    "num : T_SNUM",
    "lit : str",
    "lit : num",
    "lit : reg",
    "lit : arr",
    "lit : obj",
    "lit : kwc",
    "arr : '[' ']'",
    "arr : '[' rxpr T_FOR '(' rxpr_noin T_IN rxpr ')' ']'",
    "arr : '[' arr_vals ']'",
    "arr : '[' error ']'",
    "arr_vals : arr_vals_cs comma_opt",
    "arr_vals_cs : arr_val",
    "arr_vals_cs : arr_vals_cs ',' arr_val",
    "arr_val : T_REST rxpr",
    "arr_val : rxpr",
    "obj : '{' '}'",
    "obj : '{' obj_pairs '}'",
    "obj : '{' error '}'",
    "obj_pairs : obj_pairs_cs comma_opt",
    "obj_pairs_cs : obj_pair",
    "obj_pairs_cs : obj_pairs_cs ',' obj_pair",
    "obj_pair : obj_key ':' rxpr",
    "obj_key : ident",
    "obj_key : str",
    "obj_key : '[' rxpr ']'",
    "obj_key : T_FN",
    "obj_key : T_LET",
    "obj_key : T_PHP",
    "obj_key : T_TEST",
    "obj_key : T_ASSERT",
    "obj_key : T_TRUE",
    "obj_key : T_FALSE",
    "obj_key : T_NULL",
    "obj_key : T_IF",
    "obj_key : T_ELSIF",
    "obj_key : T_ELSE",
    "obj_key : T_TRY",
    "obj_key : T_THROW",
    "obj_key : T_CATCH",
    "obj_key : T_FINALLY",
    "obj_key : T_USE",
    "obj_key : T_MODULE",
    "obj_key : T_EXTERN",
    "obj_key : T_CLASS",
    "obj_key : T_TRAIT",
    "obj_key : T_IFACE",
    "obj_key : T_THIS",
    "obj_key : T_STATIC",
    "obj_key : T_CONST",
    "obj_key : T_FINAL",
    "obj_key : T_PUBLIC",
    "obj_key : T_PRIVATE",
    "obj_key : T_PROTECTED",
    "obj_key : T_ENUM",
    "obj_key : T_SWITCH",
    "obj_key : T_CASE",
    "obj_key : T_FOR",
    "obj_key : T_WHILE",
    "obj_key : T_DO",
    "obj_key : T_BREAK",
    "obj_key : T_CONTINUE",
    "obj_key : T_RETURN",
    "obj_key : T_SUPER",
    "obj_key : T_GOTO",
    "obj_key : T_REQUIRE",
    "obj_key : T_YIELD",
    "obj_key : T_GLOBAL",
    "obj_key : T_TINT",
    "obj_key : T_TBOOL",
    "obj_key : T_TFLOAT",
    "obj_key : T_TSTRING",
    "obj_key : T_TREGEXP",
    "obj_key : T_SEALED",
    "obj_key : T_INLINE",
    "obj_key : T_CFILE",
    "obj_key : T_CLINE",
    "obj_key : T_CCOLN",
    "obj_key : T_CFN",
    "obj_key : T_CCLASS",
    "obj_key : T_CMETHOD",
    "obj_key : T_CMODULE",
    "comma_opt : /* empty */",
    "comma_opt : ','"
  ];
  
  private function yytrace_newstate($state, $tokenId) 
  {
    $msg = '% State ' . $state. ', Lookahead ';
    
    if ($tokenId === self::TOKEN_NONE)
      $msg .= '--none--';
    else
      $msg .= self::$terminals[$tokenId];
    
    $this->trace($msg);
  }

  private function yytrace_read($tokenId) 
  {
    $this->trace('% Reading ' . self::$terminals[$tokenId]);
  }

  private function yytrace_shift($tokenId) 
  {
    $this->trace('% Shift ' . self::$terminals[$tokenId]);
  }

  private function yytrace_accept() 
  {
    $this->trace('% Accepted.');
  }

  private function yytrace_reduce($n) 
  {
    $this->trace('% Reduce by (' . $n . ') ' . self::$yyproduction[$n]);
  }

  private function yytrace_pop($state) 
  {
    $this->trace('% Recovering, uncovers state ' . $state);
  }

  private function yytrace_discard($tokenId) 
  {
    $this->trace('% Discard ' . self::$terminals[$tokenId]);
  }
  
  private function trace($msg)
  {
    $this->error_at(null, ERR_INFO, $msg);
  }
    
  private $yyval;
  private $yyastk;
  private $yysstk;
  private $yysp;
  private $yystate;
  private $yyloc; // current location
  
  private $lex;
  private $invalid = false;
  
  /**
   * returns the current location (last scanned token)
   * 
   * @return Location
   */
  public function loc()
  {
    if (!$this->yyloc)
      return new Location('<unknown>', new Position(0, 0));
    
    return $this->yyloc;
  }
  
  /**
   * consumes semicolons to avoid unnecessary empty-expressions 
   * 
   * @void
   */
  private function eat_semis()
  {
    $peek = $this->lex->peek();
    
    if ($peek->type === T_SEMI) {
      $num = 0;
      do {
        ++$num;
        $this->lex->skip();
        $peek = $this->lex->peek();
      } while ($peek->type === T_SEMI);

      $this->trace("% Consumed $num semicolon(s)");
    }
  }
  
  /**
   * parse function
   * 
   * @param  Lexer  $lex
   * @return Node
   */
  public function parse(Lexer $lex) 
  {
    $tokid = self::TOKEN_NONE;
    
    // lexer
    $this->lex = $lex;
    
    // stacks
    $this->yysstk = [ 0 ]; 
    $this->yyastk = [];
    
    // current state
    $yystate = 0;
    
    // error flag
    $yyerrflag = 0;

    // stack position
    $this->yysp = 0;
    
    // location stack
    $yylstk = [];

    for (;;) {
      $this->yytrace_newstate($yystate, $tokid);
      if (self::$yybase[$yystate] == 0)
        $yyn = self::$yydefault[$yystate];
      else {
        if ($tokid === self::TOKEN_NONE) {
          // Fetch the next token id from the lexer
          $token = $this->lex->next();
                    
          // invalid token (regexp-scan failed)
          if ($token->type === T_INVL) {
            $this->error_at($token->loc, ERR_ERROR, 'invalid source/regexp-literal');
            return null;
          }
          
          // map the lexer token id to the internally used token id's
          if ($token->type >= 0 && $token->type < self::TOKEN_MAP_SIZE)
            $tokid = self::$translate[$token->type];
          else {
            $this->error_at($token->loc, ERR_ERROR, 'invalid token %d -> %s', 
              $token->type, $token->value);
            return null;
          }        
          
          $this->yyloc = $token->loc;
          
          // store location
          $yylstk[$this->yysp] = $this->yyloc;
          
          $this->yytrace_read($tokid);
        } 

        if ((($yyn = self::$yybase[$yystate] + $tokid) >= 0
          && $yyn < self::YYLAST && self::$yycheck[$yyn] == $tokid
          || ($yystate < self::YY2TBLSTATE
            && ($yyn = self::$yybase[$yystate + self::YYNLSTATES] + $tokid) >= 0
            && $yyn < self::YYLAST && self::$yycheck[$yyn] == $tokid))
          && ($yyn = self::$yyaction[$yyn]) != self::YYDEFAULT
        ) {
          /*
           * >= YYNLSTATE: shift and reduce
           * > 0: shift
           * = 0: accept
           * < 0: reduce
           * = -YYUNEXPECTED: error
           */
          if ($yyn > 0) {
            /* shift */
            $this->yytrace_shift($tokid);
            
            $this->yysp++;
            
            $this->yysstk[$this->yysp] = $yystate = $yyn;
            $this->yyastk[$this->yysp] = $token;
            
            // store location
            $yylstk[$this->yysp] = $this->yyloc;
            
            $tokid = self::TOKEN_NONE;
            
            if ($yyerrflag > 0)
              $yyerrflag--;
            
            if ($yyn < self::YYNLSTATES)
              continue;

            /* $yyn >= YYNLSTATES means shift-and-reduce */
            $yyn -= self::YYNLSTATES;
          } else
            $yyn = -$yyn;
        } else
          $yyn = self::$yydefault[$yystate];
      }
      
      for (;;) {
        /* reduce/error */
        if ($yyn == 0) {
          /* accept */
          if ($this->invalid === true)
            return null;
          $this->yytrace_accept();
          return $this->yyval;
        } elseif ($yyn != self::YYUNEXPECTED) {
          /* reduce */
          $this->yytrace_reduce($yyn);
//ifnot -t
          $this->{'yyn' . $yyn}();
//endif          
          /* Goto - shift nonterminal */
          $yylen = self::$yylen[$yyn];
          $yyloc = $yylstk[$this->yysp - $yylen];
          
          $this->yysp -= $yylen;
          
          $yyn = self::$yylhs[$yyn];
          
          if (($yyp = self::$yygbase[$yyn]
           + $this->yysstk[$this->yysp]) >= 0
            && $yyp < self::YYGLAST && self::$yygcheck[$yyp] == $yyn)
            $yystate = self::$yygoto[$yyp];
          else
            $yystate = self::$yygdefault[$yyn];
          
          $this->yysp++;
          
          $this->yysstk[$this->yysp] = $yystate;
          $this->yyastk[$this->yysp] = $this->yyval;
          
          // set location if a real node was produced by $yyn
          if ($this->yyval instanceof Node)
            $this->yyval->loc = $yyloc;
          
          // store position
          $yylstk[$this->yysp] = $this->yyloc;
          
        } else {
          /* error */
          $this->invalid = true;
          
          switch ($yyerrflag) {
            case 0:
              $expa = [];
              $expn = 0;
              $base = self::$yybase[$yystate];
              
              for ($i = 0; $i < self::TOKEN_MAP_SIZE; ++$i) {
                $n = $base + $i;
                if ($n >= 0 && $n < self::YYLAST && self::$yycheck[$n] == $i
                  || $yystate < self::YY2TBLSTATE
                  && ($n = self::$yybase[$yystate + self::YYNLSTATES] + $i)
                  && $n < self::YYLAST && ($n < 0 || self::$yycheck[$n] == $i)
                ) {
                  if ($n >= 0 && self::$yyaction[$n] != self::YYUNEXPECTED) {
                    if ($expn === 4) {
                      /* Too many expected tokens */
                      $expa = null;
                      $expn = 0;
                      break;
                    }

                    $expa[] = self::$terminals[$i];
                    $expn++;
                  }
                }
              }

              $exps = 'unexpected ' . self::$terminals[$tokid];
              
              if ($expn > 0) {
                $last = array_pop($expa);
                $exps .= ', expected ';
                
                if ($expn > 1)
                  $exps .= implode(', ', $expa) . ' or ';
                
                $exps .= $last;
                unset ($expa, $last);
              }
              
              $this->error_at($this->yyloc, ERR_ERROR, $exps);              
            case 1:
            case 2:
              $yyerrflag = 3;  
              
              while (!(($yyn = self::$yybase[$yystate] + self::YYINTERRTOK) >= 0
                && $yyn < self::YYLAST && self::$yycheck[$yyn] == self::YYINTERRTOK
                || ($yystate < self::YY2TBLSTATE
                  && ($yyn = self::$yybase[$yystate + self::YYNLSTATES] + self::YYINTERRTOK) >= 0
                  && $yyn < self::YYLAST && self::$yycheck[$yyn] == self::YYINTERRTOK))
              ) {  
                if ($this->yysp <= 0) 
                  return null;
                
                $yystate = $this->yysstk[--$this->yysp];              
                $this->yytrace_pop($yystate);
              }
              
              $yyn = self::$yyaction[$yyn];
              $this->yytrace_shift(self::YYINTERRTOK);
              $this->yysstk[++$this->yysp] = $yystate = $yyn;
              break;
            
            case 3:
              $this->yytrace_discard($tokid);
              if ($tokid === 0) 
                return null;
              
              $tokid = -1;
              break;
          }
        }

        if ($yystate < self::YYNLSTATES)
          break;
        
        /* >= YYNLSTATES means shift-and-reduce */
        $yyn = $yystate - self::YYNLSTATES;
      }
    }
  }
  
  /**
   * tries to fetch a location from a production (symbol)
   * 
   * @param  Node|Token|array $prd
   * @return Location
   */
  protected function genloc($prd)
  {
    if (!$prd) // maybe a error
      return null;
    
    if (is_array($prd)) // list, use first symbol
      return $this->genloc($prd[0]);
    
    if (isset ($prd->loc)) // use symbol
      return $prd->loc;
      
    // error?
    return null;
  }


  private function yyn0() 
  {
    $this->yyval = $this->yyastk[$this->yysp];
  }


  private function yyn1() 
  {
     $this->yyval = new Unit(null); 
  }


  private function yyn2() 
  {
     $this->yyval = new Unit($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn3() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn4() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn5() 
  {
     $this->yyval = new Module($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn6() 
  {
     $this->yyval = new Module($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-4)]); $this->eat_semis(); 
  }


  private function yyn7() 
  {
     $this->yyval = new Module(null, $this->yyastk[$this->yysp-(4-3)]); $this->eat_semis(); 
  }


  private function yyn8() 
  {
     $this->yyval = new Program($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn9() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn10() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn11() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn12() 
  {
     $this->yyval = null; 
  }


  private function yyn13() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn14() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn15() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn16() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn17() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn18() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn19() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn20() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn21() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn22() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn23() 
  {
     $this->yyval = null; 
  }


  private function yyn24() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn25() 
  {
     $this->yyval = new RequireDecl(false, $this->yyastk[$this->yysp-(3-2)]); $this->eat_semis(); 
  }


  private function yyn26() 
  {
     $this->yyval = new RequireDecl(true, $this->yyastk[$this->yysp-(4-3)]); $this->eat_semis(); 
  }


  private function yyn27() 
  {
     $this->yyval = new AttrDecl($this->yyastk[$this->yysp-(4-2)]); $this->eat_semis(); 
  }


  private function yyn28() 
  {
     $this->yyval = new CompAttr($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn29() 
  {
     $this->yyval = new TopexAttr($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn30() 
  {
     $this->yyval = new AttrDef($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn31() 
  {
     $this->yyval = new AttrDef($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)]); 
  }


  private function yyn32() 
  {
     $this->yyval = new AttrVal($this->yyastk[$this->yysp-(1-1)], null); 
  }


  private function yyn33() 
  {
     $this->yyval = new AttrVal($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn34() 
  {
     $this->yyval = new AttrVal($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)]); 
  }


  private function yyn35() 
  {
     $this->yyval = new UseDecl($this->yyastk[$this->yysp-(3-2)]); $this->eat_semis(); 
  }


  private function yyn36() 
  {
     $this->yyval = new UseDecl(new UseAlias($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-4)])); $this->eat_semis(); 
  }


  private function yyn37() 
  {
     $this->yyval = new UseDecl(new UseUnpack($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-4)])); $this->eat_semis(); 
  }


  private function yyn38() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn39() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn40() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn41() 
  {
     $this->yyval = new UseAlias($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn42() 
  {
     $this->yyval = new UseUnpack($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)]); 
  }


  private function yyn43() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn44() 
  {
     $this->yyval = null; 
  }


  private function yyn45() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn46() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn47() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn48() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn49() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn50() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn51() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn52() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn53() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn54() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn55() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn56() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn57() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn58() 
  {
     $this->yyval = new EnumDecl($this->yyastk[$this->yysp-(5-1)], $this->yyastk[$this->yysp-(5-4)]); $this->eat_semis(); 
  }


  private function yyn59() 
  {
     $this->yyval = null; 
  }


  private function yyn60() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn61() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn62() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn63() 
  {
     $this->yyval = new VarItem($this->yyastk[$this->yysp-(1-1)], null); 
  }


  private function yyn64() 
  {
     $this->yyval = new VarItem($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn65() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn66() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn67() 
  {
     $this->yyval = new VarItem($this->yyastk[$this->yysp-(1-1)], null); 
  }


  private function yyn68() 
  {
     $this->yyval = new VarItem($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn69() 
  {
     $this->yyval = new ArrDestr($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn70() 
  {
     $this->yyval = new ObjDestr($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn71() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn72() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn73() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn74() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn75() 
  {
     $this->yyval = new ClassDecl($this->yyastk[$this->yysp-(8-1)], $this->yyastk[$this->yysp-(8-3)], $this->yyastk[$this->yysp-(8-4)], $this->yyastk[$this->yysp-(8-5)], $this->yyastk[$this->yysp-(8-7)]); $this->eat_semis(); 
  }


  private function yyn76() 
  {
     $this->yyval = new ClassDecl($this->yyastk[$this->yysp-(6-1)], $this->yyastk[$this->yysp-(6-3)], $this->yyastk[$this->yysp-(6-4)], $this->yyastk[$this->yysp-(6-5)], null); $this->eat_semis(); 
  }


  private function yyn77() 
  {
     $this->yyval = null; 
  }


  private function yyn78() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(2-2)]; 
  }


  private function yyn79() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(3-2)]; 
  }


  private function yyn80() 
  {
     $this->yyval = null; 
  }


  private function yyn81() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(2-2)]; 
  }


  private function yyn82() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(3-2)]; 
  }


  private function yyn83() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn84() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn85() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn86() 
  {
     $this->yyval = null; 
  }


  private function yyn87() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(2-2)]; 
  }


  private function yyn88() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn89() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn90() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn91() 
  {
     $this->yyval = null; 
  }


  private function yyn92() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn93() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn94() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn95() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn96() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn97() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn98() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn99() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn100() 
  {
     $this->yyval = new CtorDecl($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)], null); $this->eat_semis(); 
  }


  private function yyn101() 
  {
     $this->yyval = new CtorDecl($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn102() 
  {
     $this->yyval = new DtorDecl($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)], null); $this->eat_semis(); 
  }


  private function yyn103() 
  {
     $this->yyval = new DtorDecl($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn104() 
  {
     $this->yyval = new GetterDecl($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-3)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn105() 
  {
     $this->yyval = new GetterDecl($this->yyastk[$this->yysp-(6-2)], $this->yyastk[$this->yysp-(6-3)], $this->yyastk[$this->yysp-(6-5)]); $this->eat_semis(); 
  }


  private function yyn106() 
  {
     $this->yyval = new SetterDecl($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-3)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn107() 
  {
     $this->yyval = new GetterDecl($this->yyastk[$this->yysp-(6-2)], $this->yyastk[$this->yysp-(6-3)], $this->yyastk[$this->yysp-(6-5)]); $this->eat_semis(); 
  }


  private function yyn108() 
  {
     $this->yyval = new NestedMods($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)]); 
  }


  private function yyn109() 
  {
     $this->yyval = new TraitUse($this->yyastk[$this->yysp-(3-2)], null, null); $this->eat_semis(); 
  }


  private function yyn110() 
  {
     $this->yyval = new TraitUse($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-4)], null); $this->eat_semis(); 
  }


  private function yyn111() 
  {
     $this->yyval = new TraitUse($this->yyastk[$this->yysp-(5-2)], null, $this->yyastk[$this->yysp-(5-4)]); 
  }


  private function yyn112() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn113() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn114() 
  {
     $this->yyval = new TraitItem($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], null, null); $this->eat_semis(); 
  }


  private function yyn115() 
  {
     $this->yyval = new TraitItem($this->yyastk[$this->yysp-(6-1)], $this->yyastk[$this->yysp-(6-2)], $this->yyastk[$this->yysp-(6-4)], $this->yyastk[$this->yysp-(6-6)]); $this->eat_semis(); 
  }


  private function yyn116() 
  {
     $this->yyval = new TraitDecl($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-4)]); $this->eat_semis(); 
  }


  private function yyn117() 
  {
     $this->yyval = new TraitDecl($this->yyastk[$this->yysp-(3-2)], null); $this->eat_semis(); 
  }


  private function yyn118() 
  {
     $this->yyval = new IfaceDecl($this->yyastk[$this->yysp-(6-2)], $this->yyastk[$this->yysp-(6-3)], $this->yyastk[$this->yysp-(6-5)]); $this->eat_semis(); 
  }


  private function yyn119() 
  {
     $this->yyval = new IfaceDecl($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-3)], null); $this->eat_semis(); 
  }


  private function yyn120() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn121() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn122() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn123() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn124() 
  {
     $this->yyval = null; 
  }


  private function yyn125() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn126() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn127() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn128() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn129() 
  {
     $this->yyval = new LetDecl($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)]); $this->eat_semis(); 
  }


  private function yyn130() 
  {
     $this->yyval = new VarDecl($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)]); $this->eat_semis(); 
  }


  private function yyn131() 
  {
     $this->yyval = new LetDecl($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn132() 
  {
     $this->yyval = new VarDecl($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn133() 
  {
     $this->yyval = new FnDecl($this->yyastk[$this->yysp-(5-1)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-4)], $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn134() 
  {
     $this->yyval = new FnDecl($this->yyastk[$this->yysp-(7-1)], $this->yyastk[$this->yysp-(7-3)], $this->yyastk[$this->yysp-(7-4)], $this->yyastk[$this->yysp-(7-6)]); $this->eat_semis(); 
  }


  private function yyn135() 
  {
     $this->yyval = new FnDecl($this->yyastk[$this->yysp-(5-1)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-4)], null); $this->eat_semis(); 
  }


  private function yyn136() 
  {
     $this->yyval = new FnDecl($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)], null, null); $this->eat_semis(); 
  }


  private function yyn137() 
  {
     $this->yyval = new FnExpr($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-3)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn138() 
  {
     $this->yyval = new FnExpr($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn139() 
  {
     $this->yyval = new FnExpr(null, $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn140() 
  {
     $this->yyval = new FnExpr(null, $this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn141() 
  {
     $this->yyval = new FnExpr($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-3)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn142() 
  {
     $this->yyval = new FnExpr($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn143() 
  {
     $this->yyval = new FnExpr(null, $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn144() 
  {
     $this->yyval = new FnExpr(null, $this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn145() 
  {
     $this->yyval = null; 
  }


  private function yyn146() 
  {
     $this->yyval = null; 
  }


  private function yyn147() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(3-2)]; 
  }


  private function yyn148() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn149() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn150() 
  {
     $this->yyval = new Param(null, $this->yyastk[$this->yysp-(1-1)], null); 
  }


  private function yyn151() 
  {
     $this->yyval = new Param(null, $this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn152() 
  {
     $this->yyval = new Param($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)], null); 
  }


  private function yyn153() 
  {
     $this->yyval = new Param($this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn154() 
  {
     $this->yyval = new ThisParam($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)], null); 
  }


  private function yyn155() 
  {
     $this->yyval = new ThisParam($this->yyastk[$this->yysp-(5-1)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn156() 
  {
     $this->yyval = new RestParam($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn157() 
  {
    $this->yyval = $this->yyastk[$this->yysp];
  }


  private function yyn158() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn159() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn160() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn161() 
  {
     $this->yyval = new DoStmt($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-4)]); 
  }


  private function yyn162() 
  {
     $this->yyval = new IfStmt($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-4)], $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn163() 
  {
     $this->yyval = new ForInStmt($this->yyastk[$this->yysp-(7-3)], $this->yyastk[$this->yysp-(7-5)], $this->yyastk[$this->yysp-(7-7)]); 
  }


  private function yyn164() 
  {
     $this->yyval = new ForInStmt($this->yyastk[$this->yysp-(7-3)], $this->yyastk[$this->yysp-(7-5)], $this->yyastk[$this->yysp-(7-7)]); 
  }


  private function yyn165() 
  {
     $this->yyval = new ForInStmt($this->yyastk[$this->yysp-(7-3)], $this->yyastk[$this->yysp-(7-5)], $this->yyastk[$this->yysp-(7-7)]); 
  }


  private function yyn166() 
  {
     $this->yyval = new ForStmt($this->yyastk[$this->yysp-(6-3)], $this->yyastk[$this->yysp-(6-4)], null, $this->yyastk[$this->yysp-(6-6)]); 
  }


  private function yyn167() 
  {
     $this->yyval = new ForStmt($this->yyastk[$this->yysp-(7-3)], $this->yyastk[$this->yysp-(7-4)], $this->yyastk[$this->yysp-(7-5)], $this->yyastk[$this->yysp-(7-7)]); 
  }


  private function yyn168() 
  {
     $this->yyval = null; 
  }


  private function yyn169() 
  {
     $this->yyval = new ForStmt(null, null, null, $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn170() 
  {
     $this->yyval = new TryStmt($this->yyastk[$this->yysp-(2-2)], null, null); 
  }


  private function yyn171() 
  {
     $this->yyval = new TryStmt($this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)], null); 
  }


  private function yyn172() 
  {
     $this->yyval = new TryStmt($this->yyastk[$this->yysp-(3-2)], null, $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn173() 
  {
     $this->yyval = new TryStmt($this->yyastk[$this->yysp-(4-2)], $this->yyastk[$this->yysp-(4-3)], $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn174() 
  {
     $this->yyval = new PhpStmt($this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-4)]); 
  }


  private function yyn175() 
  {
     $this->yyval = new GotoStmt($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn176() 
  {
     $this->yyval = new TestStmt(null, $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn177() 
  {
     $this->yyval = new TestStmt($this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn178() 
  {
     $this->yyval = new BreakStmt(null); 
  }


  private function yyn179() 
  {
     $this->yyval = new BreakStmt($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn180() 
  {
     $this->yyval = new ContinueStmt(null); 
  }


  private function yyn181() 
  {
     $this->yyval = new ContinueStmt($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn182() 
  {
     $this->yyval = new ThrowStmt($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn183() 
  {
     $this->yyval = new WhileStmt($this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn184() 
  {
     $this->yyval = new YieldStmt($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn185() 
  {
     $this->yyval = new AssertStmt($this->yyastk[$this->yysp-(3-2)], null); 
  }


  private function yyn186() 
  {
     $this->yyval = new AssertStmt($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-4)]); 
  }


  private function yyn187() 
  {
     $this->yyval = new SwitchStmt($this->yyastk[$this->yysp-(5-2)], $this->yyastk[$this->yysp-(5-4)]); 
  }


  private function yyn188() 
  {
     $this->yyval = new ReturnStmt($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn189() 
  {
     $this->yyval = new LabeledStmt($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn190() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn191() 
  {
     $this->yyval = null; 
  }


  private function yyn192() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn193() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn194() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn195() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn196() 
  {
     $this->yyval = null; 
  }


  private function yyn197() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn198() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn199() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn200() 
  {
     $this->yyval = new ElsifItem($this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn201() 
  {
     $this->yyval = null; 
  }


  private function yyn202() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn203() 
  {
     $this->yyval = new ElseItem($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn204() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn205() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn206() 
  {
     $this->yyval = new CatchItem(null, null, $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn207() 
  {
     $this->yyval = new CatchItem($this->yyastk[$this->yysp-(5-3)], null, $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn208() 
  {
     $this->yyval = new CatchItem($this->yyastk[$this->yysp-(7-3)], $this->yyastk[$this->yysp-(7-5)], $this->yyastk[$this->yysp-(7-7)]); 
  }


  private function yyn209() 
  {
     $this->yyval = null; 
  }


  private function yyn210() 
  {
     $this->yyval = new FinallyItem($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn211() 
  {
     $this->yyval = null; 
  }


  private function yyn212() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn213() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn214() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn215() 
  {
     $this->yyval = new PhpUse($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn216() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn217() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn218() 
  {
     $this->yyval = new PhpUseItem($this->yyastk[$this->yysp-(1-1)], null); 
  }


  private function yyn219() 
  {
     $this->yyval = new PhpUseItem($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn220() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn221() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn222() 
  {
     new CaseItem($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn223() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn224() 
  {
     $this->yyastk[$this->yysp-(2-1)][] = $this->yyastk[$this->yysp-(2-2)]; $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn225() 
  {
     $this->yyval = new CaseLabel($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn226() 
  {
     $this->yyval = new CaseLabel(null); 
  }


  private function yyn227() 
  {
     $this->yyval = new Block(null); 
  }


  private function yyn228() 
  {
     $this->yyval = new Block($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn229() 
  {
     $this->yyval = null; 
  }


  private function yyn230() 
  {
     $this->yyval = new ExprStmt($this->yyastk[$this->yysp-(2-1)]); $this->eat_semis(); 
  }


  private function yyn231() 
  {
     $this->yyval = new ExprStmt(null); $this->eat_semis(); 
  }


  private function yyn232() 
  {
     $this->yyval = new ExprStmt($this->yyastk[$this->yysp-(2-1)]); 
  }


  private function yyn233() 
  {
     $this->yyval = new ExprStmt(null); 
  }


  private function yyn234() 
  {
     $this->yyval = new ExprStmt($this->yyastk[$this->yysp-(2-1)]); 
  }


  private function yyn235() 
  {
     $this->yyval = new ExprStmt(null); 
  }


  private function yyn236() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn237() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn238() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn239() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn240() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn241() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn242() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn243() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn244() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn245() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn246() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn247() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn248() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn249() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn250() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn251() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn252() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn253() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn254() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn255() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn256() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn257() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn258() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn259() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn260() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn261() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn262() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn263() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn264() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn265() 
  {
     $this->yyval = new CheckExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn266() 
  {
     $this->yyval = new CheckExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn267() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn268() 
  {
     $this->yyval = new UpdateExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn269() 
  {
     $this->yyval = new UpdateExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn270() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn271() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn272() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn273() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn274() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn275() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn276() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn277() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn278() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn279() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn280() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn281() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn282() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn283() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn284() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn285() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn286() 
  {
     $this->yyval = new MemberExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn287() 
  {
     $this->yyval = new MemberExpr(true, $this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)]); 
  }


  private function yyn288() 
  {
     $this->yyval = null; 
  }


  private function yyn289() 
  {
     $this->yyval = new CondExpr($this->yyastk[$this->yysp-(5-1)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn290() 
  {
     $this->yyval = new CondExpr($this->yyastk[$this->yysp-(4-1)], null, $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn291() 
  {
     $this->yyval = new CallExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn292() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn293() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn294() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn295() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn296() 
  {
     $this->yyval = new UpdateExpr(true, $this->yyastk[$this->yysp-(2-2)], $this->yyastk[$this->yysp-(2-1)]); 
  }


  private function yyn297() 
  {
     $this->yyval = new UpdateExpr(true, $this->yyastk[$this->yysp-(2-2)], $this->yyastk[$this->yysp-(2-1)]); 
  }


  private function yyn298() 
  {
     $this->yyval = new NewExpr($this->yyastk[$this->yysp-(2-2)], null); 
  }


  private function yyn299() 
  {
     $this->yyval = new NewExpr($this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn300() 
  {
     $this->yyval = new DelExpr($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn301() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn302() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn303() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn304() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn305() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn306() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn307() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn308() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn309() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn310() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn311() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn312() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn313() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn314() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn315() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn316() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn317() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn318() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn319() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn320() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn321() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn322() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn323() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn324() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn325() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn326() 
  {
     $this->yyval = new CheckExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn327() 
  {
     $this->yyval = new CheckExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn328() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn329() 
  {
     $this->yyval = new UpdateExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn330() 
  {
     $this->yyval = new UpdateExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn331() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn332() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn333() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn334() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn335() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn336() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn337() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn338() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn339() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn340() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn341() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn342() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn343() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn344() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn345() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn346() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn347() 
  {
     $this->yyval = new MemberExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn348() 
  {
     $this->yyval = new MemberExpr(true, $this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)]); 
  }


  private function yyn349() 
  {
     $this->yyval = null; 
  }


  private function yyn350() 
  {
     $this->yyval = new CondExpr($this->yyastk[$this->yysp-(5-1)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn351() 
  {
     $this->yyval = new CondExpr($this->yyastk[$this->yysp-(4-1)], null, $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn352() 
  {
     $this->yyval = new CallExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn353() 
  {
     $this->yyval = new YieldExpr($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn354() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn355() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn356() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn357() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn358() 
  {
     $this->yyval = new UpdateExpr(true, $this->yyastk[$this->yysp-(2-2)], $this->yyastk[$this->yysp-(2-1)]); 
  }


  private function yyn359() 
  {
     $this->yyval = new UpdateExpr(true, $this->yyastk[$this->yysp-(2-2)], $this->yyastk[$this->yysp-(2-1)]); 
  }


  private function yyn360() 
  {
     $this->yyval = new NewExpr($this->yyastk[$this->yysp-(2-2)], null); 
  }


  private function yyn361() 
  {
     $this->yyval = new NewExpr($this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn362() 
  {
     $this->yyval = new DelExpr($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn363() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn364() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn365() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn366() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn367() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn368() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn369() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn370() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn371() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn372() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn373() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn374() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn375() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn376() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn377() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn378() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn379() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn380() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn381() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn382() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn383() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn384() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn385() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn386() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn387() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn388() 
  {
     $this->yyval = new BinExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn389() 
  {
     $this->yyval = new CheckExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn390() 
  {
     $this->yyval = new CheckExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn391() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn392() 
  {
     $this->yyval = new UpdateExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn393() 
  {
     $this->yyval = new UpdateExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn394() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn395() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn396() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn397() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn398() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn399() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn400() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn401() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn402() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn403() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn404() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn405() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn406() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn407() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn408() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn409() 
  {
     $this->yyval = new AssignExpr($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn410() 
  {
     $this->yyval = new MemberExpr(false, $this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn411() 
  {
     $this->yyval = new MemberExpr(true, $this->yyastk[$this->yysp-(4-1)], $this->yyastk[$this->yysp-(4-3)]); 
  }


  private function yyn412() 
  {
     $this->yyval = null; 
  }


  private function yyn413() 
  {
     $this->yyval = new CondExpr($this->yyastk[$this->yysp-(5-1)], $this->yyastk[$this->yysp-(5-3)], $this->yyastk[$this->yysp-(5-5)]); 
  }


  private function yyn414() 
  {
     $this->yyval = new CondExpr($this->yyastk[$this->yysp-(4-1)], null, $this->yyastk[$this->yysp-(4-4)]); 
  }


  private function yyn415() 
  {
     $this->yyval = new CallExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn416() 
  {
     $this->yyval = new YieldExpr($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn417() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn418() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn419() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn420() 
  {
     $this->yyval = new UnaryExpr($this->yyastk[$this->yysp-(2-1)], $this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn421() 
  {
     $this->yyval = new UpdateExpr(true, $this->yyastk[$this->yysp-(2-2)], $this->yyastk[$this->yysp-(2-1)]); 
  }


  private function yyn422() 
  {
     $this->yyval = new UpdateExpr(true, $this->yyastk[$this->yysp-(2-2)], $this->yyastk[$this->yysp-(2-1)]); 
  }


  private function yyn423() 
  {
     $this->yyval = new NewExpr($this->yyastk[$this->yysp-(2-2)], null); 
  }


  private function yyn424() 
  {
     $this->yyval = new NewExpr($this->yyastk[$this->yysp-(3-2)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn425() 
  {
     $this->yyval = new DelExpr($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn426() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn427() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn428() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn429() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn430() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn431() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn432() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn433() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn434() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn435() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn436() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn437() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn438() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn439() 
  {
     $this->yyval = new CastExpr($this->yyastk[$this->yysp-(4-4)], $this->yyastk[$this->yysp-(4-2)]); $this->error_at($this->yyastk[$this->yysp-(4-1)]->loc, ERR_WARN, 'legacy cast, use `expr as type` instead'); 
  }


  private function yyn440() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(3-2)]; 
  }


  private function yyn441() 
  {
     $this->yyval = null; 
  }


  private function yyn442() 
  {
     $this->yyval = null; 
  }


  private function yyn443() 
  {
     $this->yyval = null; 
  }


  private function yyn444() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(3-2)]; 
  }


  private function yyn445() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn446() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn447() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn448() 
  {
     $this->yyval = new NamedArg($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn449() 
  {
     $this->yyval = new RestArg($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn450() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn451() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn452() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn453() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn454() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn455() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn456() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn457() 
  {
     $this->lex->scan_regexp($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn458() 
  {
     $this->yyval = new RegexpLit($this->yyastk[$this->yysp-(3-3)]->value); 
  }


  private function yyn459() 
  {
     $this->yyval = new Name($this->yyastk[$this->yysp-(1-1)], false); 
  }


  private function yyn460() 
  {
     $this->yyval = new Name($this->yyastk[$this->yysp-(2-2)], true); 
  }


  private function yyn461() 
  {
     $this->yyastk[$this->yysp-(3-1)]->add($this->yyastk[$this->yysp-(3-3)]); $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn462() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn463() 
  {
     $this->yyval = new TypeId($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn464() 
  {
     $this->yyval = new TypeId($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn465() 
  {
     $this->yyval = new TypeId($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn466() 
  {
     $this->yyval = new TypeId($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn467() 
  {
     $this->yyval = new TypeId($this->yyastk[$this->yysp-(1-1)]); 
  }


  private function yyn468() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn469() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn470() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn471() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(2-2)]; 
  }


  private function yyn472() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn473() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn474() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn475() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn476() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn477() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn478() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn479() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn480() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn481() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn482() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn483() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn484() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn485() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn486() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn487() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn488() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn489() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn490() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn491() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn492() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn493() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn494() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn495() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn496() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn497() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn498() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn499() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn500() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn501() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn502() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn503() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn504() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn505() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn506() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn507() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn508() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn509() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn510() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn511() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn512() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn513() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn514() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn515() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn516() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn517() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn518() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn519() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn520() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn521() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn522() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn523() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn524() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn525() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn526() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn527() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn528() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(2-2)]->value); 
  }


  private function yyn529() 
  {
     $this->yyval = new ThisExpr; 
  }


  private function yyn530() 
  {
     $this->yyval = new SuperExpr; 
  }


  private function yyn531() 
  {
     $this->yyval = new NullLit; 
  }


  private function yyn532() 
  {
     $this->yyval = new TrueLit; 
  }


  private function yyn533() 
  {
     $this->yyval = new FalseLit; 
  }


  private function yyn534() 
  {
     $this->yyval = new StrLit($this->yyastk[$this->yysp-(1-1)]->loc->file); 
  }


  private function yyn535() 
  {
     $this->yyval = new StrLit($this->yyastk[$this->yysp-(1-1)]->loc->pos->line); 
  }


  private function yyn536() 
  {
     $this->yyval = new StrLit($this->yyastk[$this->yysp-(1-1)]->loc->pos->coln); 
  }


  private function yyn537() 
  {
     $this->yyval = new EngineConst($this->yyastk[$this->yysp-(1-1)]->type); 
  }


  private function yyn538() 
  {
     $this->yyval = new EngineConst($this->yyastk[$this->yysp-(1-1)]->type); 
  }


  private function yyn539() 
  {
     $this->yyval = new EngineConst($this->yyastk[$this->yysp-(1-1)]->type); 
  }


  private function yyn540() 
  {
     $this->yyval = new EngineConst($this->yyastk[$this->yysp-(1-1)]->type); 
  }


  private function yyn541() 
  {
     $this->yyval = new StrLit($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn542() 
  {
     $this->yyval = new LNumLit($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn543() 
  {
     $this->yyval = new DNumLit($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn544() 
  {
     $this->yyval = new SNumLit($this->yyastk[$this->yysp-(1-1)]->value, $this->yyastk[$this->yysp-(1-1)]->suffix); 
  }


  private function yyn545() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn546() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn547() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn548() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn549() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn550() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn551() 
  {
     $this->yyval = new ArrayLit(null); 
  }


  private function yyn552() 
  {
     $this->yyval = new ArrayGen($this->yyastk[$this->yysp-(9-2)], $this->yyastk[$this->yysp-(9-5)], $this->yyastk[$this->yysp-(9-7)]); 
  }


  private function yyn553() 
  {
     $this->yyval = new ArrayLit($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn554() 
  {
     $this->yyval = null; 
  }


  private function yyn555() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn556() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn557() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn558() 
  {
     $this->yyval = new SpreadExpr($this->yyastk[$this->yysp-(2-2)]); 
  }


  private function yyn559() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn560() 
  {
     $this->yyval = new ObjectLit(null); 
  }


  private function yyn561() 
  {
     $this->yyval = new ObjectLit($this->yyastk[$this->yysp-(3-2)]); 
  }


  private function yyn562() 
  {
     $this->yyval = null; 
  }


  private function yyn563() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(2-1)]; 
  }


  private function yyn564() 
  {
     $this->yyval = [ $this->yyastk[$this->yysp-(1-1)] ]; 
  }


  private function yyn565() 
  {
     $this->yyastk[$this->yysp-(3-1)][] = $this->yyastk[$this->yysp-(3-3)]; $this->yyval = $this->yyastk[$this->yysp-(3-1)]; 
  }


  private function yyn566() 
  {
     $this->yyval = new ObjectPair($this->yyastk[$this->yysp-(3-1)], $this->yyastk[$this->yysp-(3-3)]); 
  }


  private function yyn567() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn568() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(1-1)]; 
  }


  private function yyn569() 
  {
     $this->yyval = $this->yyastk[$this->yysp-(3-2)]; 
  }


  private function yyn570() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn571() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn572() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn573() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn574() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn575() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn576() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn577() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn578() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn579() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn580() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn581() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn582() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn583() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn584() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn585() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn586() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn587() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn588() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn589() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn590() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn591() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn592() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn593() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn594() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn595() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn596() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn597() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn598() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn599() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn600() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn601() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn602() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn603() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn604() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn605() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn606() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn607() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn608() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn609() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn610() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn611() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn612() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn613() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn614() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn615() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn616() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn617() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn618() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn619() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn620() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn621() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn622() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn623() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn624() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn625() 
  {
     $this->yyval = new Ident($this->yyastk[$this->yysp-(1-1)]->value); 
  }


  private function yyn626() 
  {
    $this->yyval = $this->yyastk[$this->yysp];
  }


  private function yyn627() 
  {
    $this->yyval = $this->yyastk[$this->yysp];
  }

}

