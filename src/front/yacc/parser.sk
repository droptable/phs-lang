<?php

/* this parser-skeleton is based on the awesome 
   work of nikic (https://github.com/nikic) 
   with some extensions (error-recovery and location-tracking) */

/**
 * This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *   the grammar file gen/parser.y
 *   the parser skeleton gen/kymacc.php.parser
 *
 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
 * the work by Masato Bito and is in the PUBLIC DOMAIN.
 */

namespace phs\front;

$meta #
#semval($) $this->yyval
#semval($,%t) $this->yyval
#semval(%n) $this->yyastk[$this->yysp-(%l-%n)]
#semval(%n,%t) $this->yyastk[$this->yysp-(%l-%n)]
#include;

#tokenval
const %s = %n;
#endtokenval

require_once 'ast.php';
require_once 'lexer.php';

use phs\Logger;

use phs\front\ast\Node;
use phs\front\ast\Decl;
use phs\front\ast\Stmt;
use phs\front\ast\Expr;
/*@@ imports @@*/

class #(-p)
{
  const TOKEN_NONE    = -1;
  const TOKEN_INVALID = #(YYBADCH);

  const TOKEN_MAP_SIZE = #(YYMAXLEX);

  const YYLAST       = #(YYLAST);
  const YY2TBLSTATE  = #(YY2TBLSTATE);
  const YYGLAST      = #(YYGLAST);
  const YYNLSTATES   = #(YYNLSTATES);
  const YYINTERRTOK  = #(YYINTERRTOK);
  const YYUNEXPECTED = #(YYUNEXPECTED);
  const YYDEFAULT    = #(YYDEFAULT);

  /* @var array Map of token ids to their respective names */
  private static $terminals = [
    #listvar terminals
    , "???"
  ];

  /* @var array Map which translates lexer tokens to internal tokens */
  private static $translate = [
    #listvar yytranslate
  ];

  private static $yyaction = [
    #listvar yyaction
  ];

  private static $yycheck = [
    #listvar yycheck
  ];

  private static $yybase = [
    #listvar yybase
  ];

  private static $yydefault = [
    #listvar yydefault
  ];

  private static $yygoto = [
    #listvar yygoto
  ];

  private static $yygcheck = [
    #listvar yygcheck
  ];

  private static $yygbase = [
    #listvar yygbase
  ];

  private static $yygdefault = [
    #listvar yygdefault
  ];

  private static $yylhs = [
    #listvar yylhs
  ];

  private static $yylen = [
    #listvar yylen
  ];
  
#if -t
  private static $yyproduction = [
    #production-strings;
  ];
#endif
    
  private $yyval;
  private $yyastk;
  private $yysstk;
  private $yysp;
  private $yystate;
  private $yyloc; // current location
  
  private $lex;
  private $invalid = false;
  
  // current directory and filename
  private $cdir, $cfile;
  
  /**
   * returns the current location (last scanned token)
   * 
   * @return Location
   */
  public function loc()
  {
    if (!$this->yyloc)
      return new Location('<unknown>', new Position(0, 0));
    
    return $this->yyloc;
  }
  
  /**
   * consumes semicolons to avoid unnecessary empty-expressions 
   * 
   * @void
   */
  private function eat_semis()
  {
    $peek = $this->lex->peek();
    
    if ($peek->type === T_SEMI) {
#if -t
      $num = 0;
#endif
      do {
#if -t
        ++$num;
#endif
        $this->lex->skip();
        $peek = $this->lex->peek();
      } while ($peek->type === T_SEMI);

#if -t
      Logger::debug('%% Consumed %d semicolon(s)', $num);
#endif
    }
  }
  
  /**
   * consumes a T_END token
   * 
   * @void
   */
  private function eat_end()
  {
    $peek = $this->lex->peek();
    
    if ($peek->type === T_END) {
      $this->lex->skip();
#if -t
      Logger::debug('%% Consumed T_END');
#endif
    }
  }
  
  /**
   * parse function
   * 
   * @param  Lexer  $lex
   * @return Node
   */
  public function parse(Lexer $lex) 
  {
    $tokid = self::TOKEN_NONE;
    
    // lexer
    $this->lex = $lex;
    
    $file = $this->lex->get_info()['file'];
    $this->cdir = dirname($file);
    $this->cfile = $file;
    
#if -t
    Logger::debug('%% Parse %s', $file);
#endif
    
    // stacks
    $this->yysstk = [ 0 ]; 
    $this->yyastk = [];
    
    // current state
    $yystate = 0;
    
    // error flag
    $yyerrflag = 0;

    // stack position
    $this->yysp = 0;
    
    // location stack
    $yylstk = [];
    
    // ignore semicolons at the beginning
    $this->eat_semis();
    
    for (;;) {
#if -t
      Logger::debug('%% State %d, Lookahead \\', $yystate);
      
      if ($tokid === self::TOKEN_NONE)
        Logger::debug('--none--');
      else
        Logger::debug(self::$terminals[$tokid]);
#endif
      if (self::$yybase[$yystate] == 0)
        $yyn = self::$yydefault[$yystate];
      else {
        if ($tokid === self::TOKEN_NONE) {
          // Fetch the next token id from the lexer
          $token = $this->lex->next();
                    
          // invalid token (regexp-scan failed)
          if ($token->type === T_INVL) {
            Logger::error_at($token->loc, 'invalid source/regexp-literal');
            return null;
          }
          
          // map the lexer token id to the internally used token id's
          if ($token->type >= 0 && $token->type < self::TOKEN_MAP_SIZE)
            $tokid = self::$translate[$token->type];
          else {
            Logger::error_at($token->loc, 'invalid token %d -> %s', $token->type, $token->value);
            return null;
          }        
          
          $this->yyloc = $token->loc;
          
          // store location
          $yylstk[$this->yysp] = $this->yyloc;
          
#if -t
          Logger::debug('%% Reading %s', self::$terminals[$tokid]);
#endif
        } 

        if ((($yyn = self::$yybase[$yystate] + $tokid) >= 0
          && $yyn < self::YYLAST && self::$yycheck[$yyn] == $tokid
          || ($yystate < self::YY2TBLSTATE
            && ($yyn = self::$yybase[$yystate + self::YYNLSTATES] + $tokid) >= 0
            && $yyn < self::YYLAST && self::$yycheck[$yyn] == $tokid))
          && ($yyn = self::$yyaction[$yyn]) != self::YYDEFAULT
        ) {
          /*
           * >= YYNLSTATE: shift and reduce
           * > 0: shift
           * = 0: accept
           * < 0: reduce
           * = -YYUNEXPECTED: error
           */
          if ($yyn > 0) {
            /* shift */
#if -t
            Logger::debug('%% Shift %s', self::$terminals[$tokid]);
#endif
            
            $this->yysp++;
            
            $this->yysstk[$this->yysp] = $yystate = $yyn;
            $this->yyastk[$this->yysp] = $token;
            
            // store location
            $yylstk[$this->yysp] = $this->yyloc;
            
            $tokid = self::TOKEN_NONE;
            
            if ($yyerrflag > 0)
              $yyerrflag--;
            
            if ($yyn < self::YYNLSTATES)
              continue;

            /* $yyn >= YYNLSTATES means shift-and-reduce */
            $yyn -= self::YYNLSTATES;
          } else
            $yyn = -$yyn;
        } else
          $yyn = self::$yydefault[$yystate];
      }
      
      for (;;) {
        /* reduce/error */
        if ($yyn == 0) {
          /* accept */
#if -t
          Logger::debug('%% Accepted.');
#endif          
          return $this->yyval;
        } elseif ($yyn != self::YYUNEXPECTED) {
          /* reduce */
#if -t
          Logger::debug('%% Reduce by (%d) %s', $yyn, self::$yyproduction[$yyn]);
#endif

          $this->{'yyn' . $yyn}();
          
          /* Goto - shift nonterminal */
          $yylen = self::$yylen[$yyn];
          $yyloc = $yylstk[$this->yysp - $yylen];
          
          $this->yysp -= $yylen;
          
          $yyn = self::$yylhs[$yyn];
          
          if (($yyp = self::$yygbase[$yyn] + $this->yysstk[$this->yysp]) >= 0
            && $yyp < self::YYGLAST && self::$yygcheck[$yyp] == $yyn)
            $yystate = self::$yygoto[$yyp];
          else
            $yystate = self::$yygdefault[$yyn];
          
          $this->yysp++;
          
          $this->yysstk[$this->yysp] = $yystate;
          $this->yyastk[$this->yysp] = $this->yyval;
          
          // set location if a real node was produced by $yyn
          if ($this->yyval instanceof Node)
            $this->yyval->loc = $yyloc;
          
          // store position
          $yylstk[$this->yysp] = $this->yyloc;
          
        } else {
          /* error */
          $this->invalid = true;
                    
          switch ($yyerrflag) {
            case 0:
              // let the lexer know
              $this->lex->sync = true;
              
              $expa = [];
              $expn = 0;
              $base = self::$yybase[$yystate];
              
              for ($i = 0; $i < self::TOKEN_MAP_SIZE; ++$i) {
                $n = $base + $i;
                if ($n >= 0 && $n < self::YYLAST && self::$yycheck[$n] == $i
                  || $yystate < self::YY2TBLSTATE
                  && ($n = self::$yybase[$yystate + self::YYNLSTATES] + $i)
                  && $n < self::YYLAST && ($n < 0 || self::$yycheck[$n] == $i)
                ) {
                  if ($n >= 0 && self::$yyaction[$n] != self::YYUNEXPECTED) {
                    if ($expn === 4) {
                      /* Too many expected tokens */
                      $expa = null;
                      $expn = 0;
                      break;
                    }

                    $expa[] = self::$terminals[$i];
                    $expn++;
                  }
                }
              }

              $exps = 'unexpected ' . self::$terminals[$tokid];
              
              if ($expn > 0) {
                $last = array_pop($expa);
                $exps .= ', expected ';
                
                if ($expn > 1)
                  $exps .= implode(', ', $expa) . ' or ';
                
                $exps .= $last;
                unset ($expa, $last);
              }
              
              Logger::error_at($this->yyloc, $exps);              
            case 1:
            case 2:
              $yyerrflag = 3;  
              
              while (!(($yyn = self::$yybase[$yystate] + self::YYINTERRTOK) >= 0
                && $yyn < self::YYLAST && self::$yycheck[$yyn] == self::YYINTERRTOK
                || ($yystate < self::YY2TBLSTATE
                  && ($yyn = self::$yybase[$yystate + self::YYNLSTATES] + self::YYINTERRTOK) >= 0
                  && $yyn < self::YYLAST && self::$yycheck[$yyn] == self::YYINTERRTOK))
              ) {  
                if ($this->yysp <= 0) 
                  return null;
                
                $yystate = $this->yysstk[--$this->yysp];              
#if -t
                Logger::debug('%% Recovering, uncovers state %d', $yystate);
#endif          
              }
              
              $yyn = self::$yyaction[$yyn];
#if -t
              Logger::debug('%% Shift %s', self::$terminals[self::YYINTERRTOK]);
#endif
              $this->yysstk[++$this->yysp] = $yystate = $yyn;
              break;
            
            case 3:
#if -t
              Logger::debug('%% Discard %s', self::$terminals[$tokid]);
#endif
              if ($tokid === 0) 
                return null;
              
              $tokid = -1;
              break;
          }
        }

        if ($yystate < self::YYNLSTATES)
          break;
        
        /* >= YYNLSTATES means shift-and-reduce */
        $yyn = $yystate - self::YYNLSTATES;
      }
    }
  }

#reduce

  private function yyn%n() 
  {
    %b
  }

#noact

  private function yyn%n() 
  {
    $this->yyval = $this->yyastk[$this->yysp];
  }

#endreduce
}

#tailcode;
