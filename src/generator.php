<?php

namespace phs;

require_once 'walker.php';
require_once 'writer.php';
#require_once 'codegen.php';

use phs\ast\Unit;

/** code generator (for now single target PHP 5.4) */
class Generator extends Walker
{
  // compiler context
  private $ctx;
  
  // current scope
  private $scope;
  
  // scope stack
  private $sstack;
  
  // current module
  private $module;
  
  // module stack
  private $mstack;  
  
  // output handle
  private $writer;
  
  // prefix for private symbols
  private $prefix;
  
  // indent
  private $indent;
  
  // temp-id counter
  private $temp_uid = 0;
  
  public function __construct(Context $ctx)
  {
    parent::__construct($ctx);
    $this->ctx = $ctx;
  }
  
  /**
   * generates code for the given unit
   * 
   * @param  Unit $unit
   */
  public function generate(Unit $unit)
  {    
    $this->mstack = [];
    $this->sstack = [];
    
    $this->scope = $unit->scope;
    $this->module = $this->ctx->get_root();
    $this->writer = new FileWriter($unit->dest);
    $this->prefix = md5($unit->loc->file);
    
    // emit header
    $this->emitln('<?php');
    $this->emitln('/* This file was generated by the PHS-Compiler (LINK)');
    $this->emitln(' * Symbols here require some name mangling (LINK) ');
    $this->emitln(' * Do not edit unless you know what you\'re doing! */');
   
    // emit unit 
    $this->walk($unit);
    
    // emit footer
    $this->emitln('');
  }
  
  /* ------------------------------------ */
  
  protected function enter_unit($node)
  {
    $this->emitns('{');
    $this->emitln('#require_once \'phsrt.php\';');
    $this->indent();
  }

  protected function leave_unit($node)
  {
    $this->dedent();
    $this->emitln('}');
  }

  protected function enter_module($node)
  {
    array_push($this->sstack, $this->scope);
    $this->scope = $node->scope;
    
    array_push($this->mstack, $this->module);
    $this->module = $node->module;   
    
    $this->dedent();
    $this->emitln('}');
    $this->emitns('{');
    $this->indent();
  }

  protected function leave_module($node)
  {
    $this->scope = array_pop($this->sstack);
    $this->module = array_pop($this->mstack);
    
    $this->dedent();
    $this->emitln('}');
    $this->emitns('{');
    $this->indent();
  }
  
  protected function enter_fn_decl($node)
  {
    $fsym = $node->symbol;
    
    if ($fsym->flags & SYM_FLAG_EXTERN) {
      $fsym->mname = $fsym->name;
      return $this->drop();
    }
    
    $priv = !!($fsym->flags & SYM_FLAG_PRIVATE);
    
    if ($fsym->nested || $fsym->writes || $node->scope->has_captures()) {
      $fsym->mname = $this->mangle($fsym->name, true, $priv);
      $this->emit($fsym->mname, '=function');
    } else {
      $fsym->mname = $this->mangle($fsym->name, false, $priv);
      $this->emit('function ', $fsym->mname);
    }
    
    $this->emit_fn_params($fsym);
    
    array_push($this->sstack, $this->scope);
    $this->scope = $node->scope;
    
    $this->emit_fn_captures($fsym);
    $this->emitln('{');
    $this->emit_fn_intro($fsym);
    $this->indent();
  }
  
  protected function leave_fn_decl($node)
  {
    $fsym = $node->symbol;
    $this->emit_fn_outro($fsym);
    
    $this->dedent();
    $this->emit('}');
    
    if ($fsym->nested || $fsym->writes || $this->scope->has_captures())
      $this->emit(';');
      
    $this->emitln('');    
    $this->scope = array_pop($this->sstack);
  }
  
  protected function visit_let_decl($node)
  {
    $this->visit_var_decl($node);
  }
  
  protected function visit_var_decl($node)
  {
    $priv = $node->mods && !!(mods_to_symflags($node->mods) & SYM_FLAG_PRIVATE);
    foreach ($node->vars as $var) {
      assert($var->dest->kind() === 'ident'); // todo
      $name = $this->mangle($var->dest->value, true, $priv);
      $this->scope->get($var->dest->value)->mname = $name;
      $this->emit($name, '=');
      if ($var->init)
        $this->walk_some($var->init);
      else
        $this->emit('null');
      $this->emitln(';');
    }
  }
  
  protected function visit_label_decl($node) 
  {
    $this->emitln($node->id->value, ':');
    $this->walk_some($node->comp);
  }
  
  protected function visit_do_stmt($node) 
  {
    $this->emit('do ');
    $this->walk_some($node->stmt);
    $this->emit('while(');
    $this->walk_some($node->expr);
    $this->emitln(');');  
  }
  
  protected function visit_if_stmt($node) 
  {
    $this->emit('if(');
    $this->walk_some($node->expr);
    $this->emit(')');
    $this->walk_some($node->stmt);
    
    if ($node->elsifs) 
      foreach ($node->elsifs as $elsif) {
        $this->emit('elseif(');
        $this->walk_some($elsif->expr);
        $this->emit(')');
        $this->walk_some($elsif->stmt);
      }  
    
    if ($node->els) {
      $this->emit('else ');
      $this->walk_some($node->els->stmt);
    }
  }
  
  protected function visit_for_stmt($node) 
  {
    $this->emit('for(');
    if ($node->init) 
      switch ($node->init->kind()) {
        case 'let_decl':
        case 'var_decl':
          if ($node->lexical) {
            array_push($this->sstack, $this->scope);
            $this->scope = $node->scope;  
          }
          
          $priv = $node->init->mods && !!(mods_to_symflags($node->init->mods) & SYM_FLAG_PRIVATE);
          $first = true;
          foreach ($node->init->vars as $var) {
            if (!$first) $this->emit(',');
            $first = false;
            assert($var->dest->kind() === 'ident');
            $name = $this->mangle($var->dest->value, true, $priv);
            $this->scope->get($var->dest->value)->mname = $name;
            $this->emit($name, '=');
            if ($var->init) 
              $this->walk_some($var->init);
            else
              $this->emit('null');
          }
          break;
        default:
          $this->walk_some($node->init);
      }
    $this->emit(';');
    if ($node->test)
      $this->walk_some($node->test);
    if ($node->each)
      $this->walk_some($node->each);
    $this->emit(')');
    $this->walk_some($node->stmt);
  }
  
  protected function visit_for_in_stmt($n) {}
  
  protected function visit_try_stmt($node) 
  {
    $this->emit('try{');
    $this->indent();
    $this->walk_some($node->stmt);
    $this->dedent();
    $this->emitln('}');
    
    if (!$node->catches && !$node->finalizer)
      $this->emit('catch (\\Exception $_){}');
    else {
      if ($node->catches)
        foreach ($node->catches as $catch) {
          array_push($this->sstack, $this->scope);
          $this->scope = $catch->body->scope;
          
          $this->emit('catch(');
          $this->emit($catch->name->symbol->name, ' ');
          if ($catch->id) {
            $name = $this->mangle($catch->id->value, true, false);
            $this->scope->get($catch->id->value)->mname = $name;
            $this->emit($name);
          } else
            $this->emit('$_');
          $this->emit(')');
          $this->scope = array_pop($this->sstack);
          $this->walk_some($catch->body);
        }
        
      assert(!$node->finalizer);
    }
  }
  
  protected function visit_php_stmt($node) 
  {
    if ($node->usage !== null)
      foreach ($node->usage as $use)
        foreach ($use->items as $item) {
          $sid = ident_to_str($item->id);
          $sym = $this->scope->get($sid, false, null, true);
          $this->emitln('$', $sid, '=&', $sym->mname, ';');
        }
    
    $this->emit($node->code->data);  
  }
  
  protected function visit_goto_stmt($node) 
  {
    $this->emitln('goto ', $node->id->value, ';');  
  }
  
  protected function visit_test_stmt($n) {}
  
  protected function visit_break_stmt($node) 
  {
    // for now, without labels
    $this->emitln('break;');
    assert(!$node->id);  
  }
  
  protected function visit_continue_stmt($node) 
  {
    // for now, without labels
    $this->emitln('continue;');
    assert(!$node->id);  
  }
  
  protected function visit_throw_stmt($node) 
  {
    $this->emit('throw ');
    $wrap = false;
    switch ($node->expr->kind()) {
      case 'call_expr':
      case 'new_expr':
      case 'name':
        break;
      default:
        $wrap = true;
    }
    
    if ($wrap) $this->emit('new \\Exception(');
    $this->walk_some($node->expr);
    if ($wrap) $this->emit(')');
    $this->emitln(';');  
  }
  
  protected function visit_while_stmt($node) 
  {
    $this->emit('while(');
    $this->walk_some($node->test);
    $this->emit(')');
    $this->walk_some($node->stmt);  
  }
  
  protected function visit_assert_stmt($node) 
  {
    if ($node->message) {
      $this->emitln('{');
      $this->indent();
      $this->emit(' if (!');
      $this->walk_some($node->expr);
      $this->emitln(') {');
      $this->indent();
      $this->emit('print \'assertion failed: \'.(');
      $this->walk_some($node->message);
      $this->emitln(');');
      $this->emitln('assert(0);');
      $this->dedent();
      $this->emitln('}');
      $this->dedent();
      $this->emitln('}');
    } else {
      $this->emit('assert(');
      $this->walk_some($node->expr);
      $this->emit(');');
    }    
  }
  
  protected function visit_switch_stmt($node) 
  {
    $this->emit('switch(');
    $this->walk_some($node->test);
    $this->emitln('){');
    $this->indent();
    foreach ($node->cases as $citem) {
      foreach ($citem->labels as $clabel) {
        if ($clabel->expr !== null) {
          $this->emit('case ');
          $this->walk_some($clabel->expr);
        } else
          $this->emit('default');
        $this->emitln(':');
      }
      if ($citem->body !== null) {
        $this->indent();
        $this->walk_some($citem->body);
        $this->dedent();
      }
    }
    $this->emit('}');
  }
  
  protected function visit_return_stmt($node) 
  {
    $this->emit('return ');
    if ($node->expr)
      $this->walk_some($node->expr);
    $this->emitln(';');
  }
  
  protected function visit_expr_stmt($node)
  {
    $this->walk_some($node->expr);
    $this->emitln(';');
  }
  
  protected function visit_fn_expr($node) 
  {
    $fsym = $node->symbol;
    $name = false;
    $T0 = null;
    
    if (substr($fsym->name, 0, 1) !== '#') {
      $T0 = $this->temp();
      $this->emit('(', $T0, '=');
      $name = true;
    }
    
    $this->emit('function');
    $this->emit_fn_params($fsym);
    
    array_push($this->sstack, $this->scope);
    $this->scope = $node->scope;
    
    $this->emit_fn_captures($fsym, $T0);
    $this->emitln('{');
    $this->indent();
    
    // create binding
    if ($name) {
      $fsym->mname = $this->mangle($fsym->name, true, false);
      $this->emitln($fsym->mname, '=&', $T0, ';');
    }
    
    $this->emit_fn_intro($fsym);
    $this->walk_some($node->body);
    $this->dedent();
    $this->emit('}');
    
    $this->scope = array_pop($this->sstack);
    
    if ($name) $this->emit(')');
  }
  
  protected function visit_bin_expr($node) 
  {
    $this->walk_some($node->left);
    $this->emit($node->op->value);
    $this->walk_some($node->right);
  }
  
  protected function visit_check_expr($n) {}
  protected function visit_cast_expr($n) {}
  
  protected function visit_update_expr($node) 
  {
    if ($node->prefix)
      $this->emit($node->op->value);
    $this->walk_some($node->expr);
    if (!$node->prefix)
      $this->emit($node->op->value);
  }
  
  protected function visit_assign_expr($node) 
  {
    $this->walk_some($node->left);
    $this->emit($node->op->value);
    $this->walk_some($node->right);
  }
  
  protected function visit_member_expr($node) 
  {
    if ($node->prop === true) {
      $this->walk_some($node->obj);
      $this->emit('->');
      if ($node->computed) {
        $this->emit('{');
        $this->walk_some($node->member);
        $this->emit('}');
      } else
        $this->emit($node->member->value);
    } else {
      $this->walk_some($node->obj);
      $this->emit('[');
      $this->walk_some($node->member);
      $this->emit(']');
    }
  }
  
  protected function visit_cond_expr($node) 
  {
    $this->emit('((');
    $this->walk_some($node->test);
    $this->emit(')?');
    if ($node->then) 
      $this->walk_some($node->then);
    $this->emit(':');
    $this->walk_some($node->els);
    $this->emit(')');
  }
  
  protected function visit_call_expr($node) 
  {
    if ($node->callee->kind() !== 'name') {
      $this->emit('\\_call(');
      $this->walk_some($node->callee);
      if ($node->args) {
        $this->emit(',[');
        $first = true;
        foreach ($node->args as $arg) {
          if (!$first) $this->emit(',');
          $first = false;
          $this->walk_some($arg);
        }
        $this->emit(']');
      } else
        $this->emit(',[]');
      $this->emit(')');
    } else {
      $this->walk_some($node->callee);
      $this->emit('(');
      if ($node->args) {
        $first = false;
        foreach ($node->args as $arg) {
          if (!$first) $this->emit(',');
          $first = false;
          $this->walk_some($arg);
        }
      }
      $this->emit(')');
    }
  }
  
  protected function visit_yield_expr($n) {}
  
  protected function visit_unary_expr($node) 
  {
    $this->emit($node->op->value);
    $this->walk_some($node->expr);
  }
  
  protected function visit_new_expr($node) 
  {
    $this->emit('new ');
    $this->walk_some($node->name);
    if ($node->args) {
      $this->emit('(');
      $first = true;
      foreach ($node->args as $arg) {
        if (!$first) $this->emit(',');
        $first = false;
        $this->walk_some($arg);
      }
      $this->emit(')');
    }
  }
  
  protected function visit_del_expr($node) 
  {
    $this->emit('unset(');
    $this->walk_some($node->id);
    $this->emit(')');
  }
  
  protected function visit_print_expr($node) 
  {
    $this->emit('print (');
    $this->walk_some($node->expr);
    $this->emit(').PHP_EOL');
  }
  
  protected function visit_lnum_lit($node) 
  {
    $value = $node->value;
    if ($value instanceof Value)
      $value = $value->value;
    $this->emit($value);
  }
  
  protected function visit_dnum_lit($node) 
  {
    $value = $node->value;
    if ($value instanceof Value)
      $value = $value->value;
    $this->emit($value); 
  }
  
  protected function visit_snum_lit($n) {}
  
  protected function visit_regexp_lit($node) 
  {
    $value = $node->value;
    if ($value instanceof Value)
      $value = $value->value;
    $this->emit("'", strtr($value, [ "'", "\\'"]), "'");
  }
  
  protected function visit_arr_lit($n) {}
  protected function visit_obj_lit($n) {}
  
  protected function visit_name($node) 
  {
    $sym = $node->symbol;
    if (!isset($sym->mname))
      $sym->mname = $this->mangle($sym->name, $sym->kind === SYM_KIND_VAR, false);
    $this->emit($sym->mname);
  }
  
  protected function visit_ident($n) 
  {
    exit("fuck");
  }
  
  protected function visit_this_expr($n) 
  {
    $this->emit('$this');  
  }
  
  protected function visit_super_expr($n) 
  {
    $this->emit('parent::');
  }
  
  protected function visit_null_lit($n) 
  {
    $this->emit('null');
  }
  
  protected function visit_true_lit($n) 
  {
    $this->emit('true');
  }
  
  protected function visit_false_lit($n) 
  {
    $this->emit('false');
  }
  
  protected function visit_engine_const($n) {}
  
  protected function visit_str_lit($node) 
  {
    $this->emit("'", strtr($node->data, [ "'" => "\\'" ]), "'");
  }
  
  protected function visit_type_id($n) {}
  
  /* ------------------------------------ */
  
  protected function temp()
  {
    return '$_T' . ($this->temp_uid++); 
  }
  
  /* ------------------------------------ */
  
  protected function emit()
  {
    $w = $this->writer;
    foreach (func_get_args() as $data)
      $w->write($data);
  }
  
  protected function emitln()
  {
    $w = $this->writer;
    foreach (func_get_args() as $data)
      $w->write($data);
    
    $w->write("\n");
    $w->write(str_repeat('  ', $this->indent));
  }
  
  protected function emitns($suffix)
  {
    $path = 'Z';
    
    if (!$this->module->root) {
      $path .= '\\';
      $path .= $this->module->path(true, '\\');
    }
    
    $this->emitln('namespace ', $path, $suffix);
  }
  
  /* ------------------------------------ */
  
  protected function emit_fn_params($fsym)
  {
    $this->emit('(');
      
    if (!empty($fsym->params)) {
      $first = true;
      foreach ($fsym->params as $param) {
        if ($param->rest) break;
        if (!$first) $this->emit(',');
        $first = false;
        
        $param->mname = $this->mangle($param->name, true, false);
        $this->emit($param->mname);
        
        if (!$param->rest && $param->init) {
          $this->emit('=');
          
          switch ($param->init->kind) {
            case VAL_KIND_LNUM:
            case VAL_KIND_DNUM:
            case VAL_KIND_STR:
              $this->emit($param->init->value);
              break;
            
            case VAL_KIND_ARR:
              if (Value::is_scalar($param->init)) {
                $this->emit($this->build_array($param->init));
                break;
              }
              
            // others are stuff for the fn_intro
            default:
              $this->emit('null');
          }
        }
      }
    }
    
    $this->emit(')');
  }
  
  protected function emit_fn_captures($fsym, $and = '')
  {
    if ($and || $this->scope->has_captures()) {
      $capts = $this->scope->get_captures();
      $first = empty($and);
      $this->emit('use(');
      if ($and) $this->emit('&', $and);
      foreach ($capts as $capt) {
        if ($capt->kind !== SYM_KIND_VAR)
          continue;
        
        if (!$first) $this->emit(',');
        $first = false;
        
        if (!isset($capt->mname))
          $capt->mname = $this->mangle($capt->name, true, false);
        
        $this->emit('&', $capt->mname);
      }
      $this->emit(')');
    }
  }
  
  protected function emit_fn_intro($fsym)
  {
    if ($fsym->params)
      foreach ($fsym->params as $param) {
        if ($param->rest) {
          $T0 = $this->temp();
          $T1 = $this->temp();
          $ZZ = $this->mangle($param->name, true, false);
          $LA = count($fsym->params) - 1;
          $this->indent();
          $this->emitln($ZZ, '=[];');
          $this->emit('for(', $T0, '=', $LA, ',');
          $this->emit($T1, '=func_num_args();', $T0, '<', $T1, ';++', $T0);
          $this->emitln('){');
          $this->indent();
          $this->emitln($ZZ, '[]=func_get_arg(', $T0, ');');
          $this->dedent();
          $this->emitln('}');
          $this->dedent();
          break; 
        }
      }
  }
  
  protected function emit_fn_outro($fsym)
  {
    
  }
  
  /* ------------------------------------ */
  
  protected function build_array($arr)
  {
    $buf = [];
    foreach ($arr->value as $item) {
      switch ($item->kind) {
        case VAL_KIND_LNUM:
        case VAL_KIND_DNUM:
        case VAL_KIND_STR:
          $buf[] = $item->value;
          break;
        case VAL_KIND_ARR:
          $buf[] = $this->build_array($item);
          break;
        default:
          assert(0);
      }
    }
    return '[' . implode(',', $buf) . ']';
  }
  
  /* ------------------------------------ */
  
  protected function mangle($name, $var = false, $priv = false, $pfx = '')
  {
    $res = '';
    
    if ($var === true)
      $res .= '$';
    
    $res .= '_';
    $res .= $pfx;
    
    if ($priv === true)
      $res .= 'I' . $this->prefix;
    else
      $res .= 'Z';
    
    $res .= '_';
    
    if ($var === true && $this->module->root === false) {
      $mod = $this->module->path(false); 
      
      if ($mod)
        foreach ($mod as $part)
          $res .= strlen($part) . $part;
      
      $res .= '_';
    }
    
    $res .= strlen($name) . $name;
    return $res;
  }
  
  /* ------------------------------------ */
  
  protected function indent()
  {
    ++$this->indent;
    $this->emitln('');
  }
  
  protected function dedent()
  {
    $this->indent = max(0, $this->indent - 1);
    $this->emitln('');
  }
}
