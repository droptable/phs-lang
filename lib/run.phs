/*!
 * This file is part of the PHS Runtime Library
 * Copyright (c) 2014 The PHS Team
 * 
 * All rights reserved.
 * 
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published 
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

extern class Obj;
extern class Dict;
extern class Error;

iface Inable {
  public fn contains(val);  
}

iface Eqable {
  public fn eq(val);
}

iface Cmpable: Eqable {
  public fn cmp(oth);
}

extern iface ArrayAccess;

extern const E_ALL;
extern const E_STRICT;

extern fn error_reporting();
extern fn set_error_handler();

error_reporting(E_ALL | E_STRICT);

// language stuff
require __php__ 'run/lng';

// root-object
require __php__ 'run/obj';

// dict: used for { ... } literals
require __php__ 'run/dict';

set_error_handler(fn (n, s, f, l) {
  extern __global__ fn basename;
  f = basename(f);
  throw new Error("%s (%d) in %s on line %d", s, n, f, l);
});

/**
 * string-type module
 * 
 *   this module contains all directly-related functions for strings.
 *   if some function is missing it is probably in a separate module.
 *   
 */
module for str {
  public extern __global__ fn __rewrite__($2, $1, $3)     explode;
  public extern __global__ fn __rewrite__($3, $1, $2, $4) str_replace;
  public extern __global__ fn __rewrite__($3, $1, $2, $4) str_ireplace;
  
  public use self::explode as split_by;
  public use self::str_replace as replace;
  public use self::str_ireplace as ireplace;
  
  public extern __global__ const CHAR_MAX;
  public extern __global__ const STR_PAD_RIGHT; 
  public extern __global__ const STR_PAD_LEFT;
  public extern __global__ const STR_PAD_BOTH;
  
  public use self::STR_PAD_RIGHT as PAD_RIGHT; 
  public use self::STR_PAD_LEFT as PAD_LEFT;
  public use self::STR_PAD_BOTH as PAD_BOTH;
  
  public extern __global__ fn addcslashes;
  public extern __global__ fn addslashes;
  public extern __global__ fn chr;
  public extern __global__ fn chunk_split;
  public extern __global__ fn count_chars;
  public extern __global__ fn crc32;
  public extern __global__ fn lcfirst;
  public extern __global__ fn ltrim;
  public extern __global__ fn ord;
  public extern __global__ fn rtrim;
  public extern __global__ fn trim;
  public extern __global__ fn ucfirst;
  public extern __global__ fn ucwords;
  public extern __global__ fn wordwrap;
    
  public extern __global__ fn str_pad;
  public extern __global__ fn str_repeat;
  public extern __global__ fn str_rot13;
  public extern __global__ fn str_shuffle;
  public extern __global__ fn str_split;
  public extern __global__ fn str_word_count;
  public extern __global__ fn strcasecmp;
  public extern __global__ fn strcmp;
  public extern __global__ fn strcoll;
  public extern __global__ fn strcspn;
  public extern __global__ fn stripcslashes;
  public extern __global__ fn stripos;
  public extern __global__ fn stripslashes;
  public extern __global__ fn stristr;
  public extern __global__ fn strlen;
  public extern __global__ fn strnatcasecmp;
  public extern __global__ fn strnatcmp;
  public extern __global__ fn strncasecmp;
  public extern __global__ fn strncmp;
  public extern __global__ fn strpbrk;
  public extern __global__ fn strpos;
  public extern __global__ fn strrchr;
  public extern __global__ fn strrev;
  public extern __global__ fn strripos;
  public extern __global__ fn strrpos;
  public extern __global__ fn strspn;
  public extern __global__ fn strstr;
  public extern __global__ fn strtok;
  public extern __global__ fn strtolower;
  public extern __global__ fn strtoupper;
  public extern __global__ fn strtr;
  public extern __global__ fn substr_compare;
  public extern __global__ fn substr_count;
  public extern __global__ fn substr_replace;
  public extern __global__ fn substr;
  
  public use self::str_pad as pad;
  public use self::str_repeat as repeat;
  public use self::str_rot13 as rot13;
  public use self::str_shuffle as shuffle;
  public use self::str_split as split;
  public use self::str_word_count as word_count;
  public use self::strcasecmp as casecmp;
  public use self::strcmp as cmp;
  public use self::strcoll as coll;
  public use self::strcspn as cspn;
  public use self::stripos as ipos;
  public use self::stristr as ipart;
  public use self::strlen as len;
  public use self::strnatcasecmp as natcasecmp;
  public use self::strnatcmp as natcmp;
  public use self::strncasecmp as ncasecmp;
  public use self::strncmp as ncmp;
  public use self::strpbrk as pbrk;
  public use self::strpos as pos;
  public use self::strrchr as rchr;
  public use self::strrev as rev;
  public use self::strripos as ripos;
  public use self::strrpos as rpos;
  public use self::strspn as spn;
  public use self::strstr as part;
  public use self::strtok as tok;
  public use self::strtolower as tolower;
  public use self::strtoupper as toupper;
  public use self::strtr as tr;
}

extern fn max;
extern fn min;

/**
 * OOP String Wrapper
 *  
 * The compiler automatically uses this class for strings 
 * with the "s" prefix: 
 *   
 *   let obj_str = s"a string value";
 *   
 * 
 * Parameter hint and type check "str" matches both primitive 
 * strings and this class.
 * 
 * Only a cast to "str" works for primitive strings only.
 * But you can cast to "Str" to create a object-string.
 * 
 * 
 * The "~" operator will call the concat() method.
 * The "~=" operator will call the extend() method.
 * The "==" operator will call the equals() method.
 * 
 * You can disable operator-overloading with the "-t" 
 * command-line switch (recommended!)
 */
public class Str ~ Inable, Cmpable, ArrayAccess {
  // @var string  internal memory
  private mem;
  
  /**
   * constructor
   * 
   * @param str
   */
  public new (str this.mem = c'') {
    if (mem is self) {
      /* dereference + copy internal value */
      __php__ { "$this->mem = $this->mem->mem . '';" }
    }
  }
  
  public fn __tostring() =>
    mem;
    
  public __hidden__ fn offsetGet(x) => 0;
  public __hidden__ fn offsetSet(x, y) => 0;
  public __hidden__ fn offsetExists(x) => 0;
  public __hidden__ fn offsetUnset(x) => 0;
  
  /**
   * "==" operator handler
   *
   * @param  str val
   * @return bool
   */
  public fn equals(__unsafe__ val) {
    /* inline-php avoids boilerplate code */
    __php__ { "return $this->mem === $val;" }
  }
  
  /* same as Str#equals() */
  public fn eq(__unsafe__ val) {
    /* inline-php avoids boilerplate code */
    __php__ { "return $this->mem === $val;" }
  }
  
  /**
   * "~=" operator handler
   *
   * @param  str val
   * @return self
   */
  public fn extend(__unsafe__ val) {
    /* inline-php avoids boilerplate code */
    __php__ { "$this->mem .= $val;" }
    return this;
  }
  
  /**
   * "~" operator handler
   *
   * @param  str val
   * @return self
   */
  public fn concat(__unsafe__ val) {
    /* inline-php avoids boilerplate code */
    __php__ { "return new static($this->mem . $val);"}
  }
  
  /**
   * return information about characters used in a string
   *
   * @param  int    mode
   * @return self|List
   */
  public fn count_chars(int mode) {
    let res = str::count_chars(mem, mode);
    if (res is tup) {
      let arr = [];
      for (val in res) 
        arr.push(new self(val));
      return arr;
    }
    return new self(res);
  }
  
  /**
   * strip whitespace (or other characters) from the 
   * beginning of a string
   *
   * @param  str    cl
   * @return self
   */
  public fn ltrim(str cl?) =>
    new self(cl ? str::ltrim(mem, cl) : str::ltrim(mem));
  
  /**
   * strip whitespace (or other characters) from the end of a string
   *
   * @param  str    cl
   * @return self
   */
  public fn rtrim(str cl?) =>
    new self(cl ? str::rtrim(mem, cl) : str::rtrim(mem));
    
  /**
   * strip whitespace (or other characters) from the end of a string
   *
   * @param  str    cl
   * @return self
   */
  public fn trim(str cl?) =>
    new self(cl ? str::trim(mem, cl) : str::trim(mem));
    
  /**
   * make a string's first character uppercase
   *
   * @return self
   */
  public fn ucfirst() =>
    new self(str::ucfirst(mem));
    
  /**
   * uppercase the first character of each word in a string
   *
   * @return self
   */
  public fn ucwords() =>
    new self(str::ucwords(mem));
    
  /**
   * make a string's first character lowercase
   *
   * @return self
   */
  public fn lcfirst() =>
    new self(str::lcfirst(mem));
  
  /**
   * pad this string to a certain length with another string
   *
   * @param  int    len
   * @param  str val
   * @param  int type
   * @return self
   */
  public fn pad(int len, str val = c' ', int type = str::PAD_RIGHT) =>
    new self(str::pad(mem, len, val, type));
  
  /**
   * replaces contents in the string
   *
   * @param  str    fnd
   * @param  str    val
   * @return self
   */
  public fn replace(str fnd, str val) =>
    new self(str::replace(mem, fnd, val));
  
  /**
   * replaces contents in the string
   *
   * @param  str    fnd
   * @param  str    val
   * @return self
   */
  public fn ireplace(str fnd, str val) =>
    new self(str::ireplace(mem, fnd, val));
  
  /**
   * repeat this string
   *
   * @param  int    t
   * @return self
   */
  public fn repeat(int t) =>
    new self(str::repeat(mem, t));
  
  /**
   * perform the rot13 transform on this string
   *
   * @return self
   */
  public fn rot13() =>
    new self(str::rot13(mem));
  
  /**
   * randomly shuffles this string
   *
   * @return self
   */
  public fn shuffle() =>
    new self(str::shuffle(mem));
  
  /**
   * splits the strings and returns it as list
   * 
   * @param  int  len
   * @return List
   */
  public fn split(int len) =>
    str::split(mem, len) as List;
  
  /**
   * return information about words used in this string 
   *
   * @return int
   */
  public fn count_words() =>
    str::word_count(mem, 0);
  
  /**
   * binary safe case-insensitive string comparison
   *
   * @param  str    oth
   * @return int
   */
  public fn casecmp(str oth) =>
    str::casecmp(mem, oth);
  
  /**
   * binary safe string comparison
   *
   * @param  str    oth
   * @return int
   */
  public fn cmp(str oth) =>
    str::cmp(mem, oth);
  
  /**
   * locale based string comparison
   *
   * @param  str    oth
   * @return int
   */
  public fn coll(str oth) =>
    str::coll(mem, oth);
  
  /**
   * find length of initial segment not matching mask
   * 
   */
  public fn cspn(str s2, int s = 0, int l = -1) =>
    str::cspn(mem, s2, s, l == -1 ? max(len(), str::len(s2)) : l);
  
  /**
   * find the position of the first occurrence of a 
   * case-insensitive substring in this string
   *
   * @param  str    fnd
   * @param  int    off
   * @return int|false
   */
  public fn ipos(str fnd, int off = 0) =>
    str::ipos(mem, fnd, off);
  
  /**
   * case-insensitive strstr() / part()
   *
   * @param  str    tok
   * @param  bool   bn 
   * @return str
   */
  public fn ipart(str tok, bool bn = false) =>
    new self(str::ipart(mem, tok, bn));
  
  /**
   * get string length
   *
   * @return int
   */
  public fn len() =>
    str::len(mem);
   
  /**
   * case insensitive string comparisons using a 
   * "natural order" algorithm
   *
   * @param  str    oth
   * @return int
   */
  public fn natcasecmp(str oth) =>
    str::natcasecmp(mem, oth);
  
  /**
   * string comparisons using a "natural order" algorithm
   *
   * @param  str    oth
   * @return int
   */
  public fn natcmp(str oth) =>
    str::natcmp(mem, oth);
  
  /**
   * binary safe case-insensitive string comparison of the first n characters
   *
   * @param  str    oth
   * @param  int    len
   * @return int
   */
  public fn ncasecmp(str oth, int len) =>
    str::ncasecmp(mem, oth, len);
  
  /**
   * binary safe string comparison of the first n characters
   *
   * @param  str    oth
   * @param  int    len
   * @return int
   */
  public fn ncmp(str oth, int len) =>
    str::ncmp(mem, oth);
  
  /**
   * search a string for any of a set of characters
   *
   * @param  str  cs
   * @return self
   */
  public fn pbrk(str cs) =>
    new self(str::pbrk(mem, cs));
  
  /**
   * find the position of the first occurrence of a substring in a string
   *
   * @param  str    oth
   * @param  int    off
   * @return int|false
   */
  public fn pos(str oth, int off = 0) =>
    str::pos(mem, oth);
  
  /**
   * find the last occurrence of a character in a string
   *
   * @param  str|int cs
   * @return self
   */
  public fn rchr(cs) =>
    new self(str::rchr(mem, cs));
  
  /**
   * reverse a string
   *
   * @return self
   */
  public fn rev() =>
    new self(str::rev(mem));
   
  /**
   * find the position of the last occurrence of a 
   * case-insensitive substring in a string
   *
   * @param  str    oth
   * @param  int    off
   * @return int|false
   */
  public fn ripos(str oth, int off = 0) =>
    str::ripos(mem, oth, off);
    
  /**
   * find the position of the last occurrence of a substring in a string
   *
   * @param  str    oth
   * @param  int    off
   * @return int|false
   */
  public fn rpos(str oth, int off = 0) =>
    str::rpos(oth, off);
  
  /**
   * finds the length of the initial segment of a string consisting 
   * entirely of characters contained within a given mask. 
   *
   * @param  str    msk
   * @param  int    args...
   * @return int
   */
  public fn spn(str msk, int ...args) =>
    str::spn(mem, msk, ...args);
  
  /**
   * find the first occurrence of a string
   *
   * @param  str    oth
   * @param  bool   bf
   * @return self
   */
  public fn part(str oth, bool bf = false) =>
    new self(str::part(mem, oth, bf));
  
  /**
   * makes the string lowercase
   *
   * @return self
   */
  public fn tolower() =>
    new self(str::tolower(mem));
  
  /**
   * makes the string uppercase
   *
   * @return self
   */
  public fn toupper() =>
    new self(str::toupper(mem));
  
  /**
   * translate characters or replace substrings
   *
   * @param  ... args
   * @return self
   */
  public fn tr(...args) =>
    new self(str::tr(mem, ...args));
  
  /**
   * binary safe comparison of two strings from an offset, 
   * up to length characters
   *
   * @param  str    oth
   * @param  int    off
   * @param  int    len
   * @param  bool   ci
   * @return int
   */
  public fn substr_compare(str oth, ...args) =>
    str::substr_compare(oth, ...args);
  
  /* same as Str#substr_compare() */
  public fn substr_cmp(str oth, ...args) =>
    str::substr_compare(oth, ...args);
  
  /**
   * count the number of substring occurrences
   *
   * @param  str    oth 
   * @param  ...    args
   * @return int
   */
  public fn substr_count(str oth, ...args) =>
    str::substr_count(mem, oth, ...args);
  
  /**
   * replace text within a portion of a string
   *
   * @param  str  rep
   * @oaram  ...  args
   * @return self
   */
  public fn substr_replace(str rep, ...args) =>
    str::substr_replace(mem, rep, ...args);
  
  /**
   * return part of a string
   * 
   * @param  ...  args
   * @return self
   */
  public fn substr(...args) =>
    str::substr(mem, ...args);
  
  /* ------------------------------------ */
  /* extensions */
  
  //re_replace
  //re_match
  //char_at
  //char_code_at
  //code_point_at
  //contains
  //ends_with
  //starts_with
  //index_of
  //last_index_of
  //slice
}

class StrRef: Str {}

let s = new StrRef("hello world");
s.replace("hello", "hallo");
print s.to_str();

// language constructs
extern __native__ fn isset;
extern __native__ fn empty;

extern const ARRAY_FILTER_USE_BOTH;
extern const SORT_REGULAR;

extern fn sort;
extern fn usort;
extern fn count;
extern fn implode;

extern fn is_array;
extern fn is_scalar;
extern fn is_object;

extern fn get_class;
extern fn spl_object_hash;

extern fn in_array;
extern fn array_splice;
extern fn array_map;
extern fn array_chunk;
extern fn array_reduce;
extern fn array_filter;
extern fn array_walk;
extern fn array_search;
extern fn array_slice;
extern fn array_merge;
extern fn array_shuffle;
extern fn array_unshift;
extern fn array_shift;
extern fn array_reverse;
extern fn array_push;
extern fn array_pop;
extern fn array_key_exists;

/**
 * OOP List Wrapper
 * 
 * All [ a, b, c ... ] literals are handled by this class.
 * 
 */
public class List ~ Inable, ArrayAccess {
  // internal array
  private mem;
  
  /**
   * constructor
   *
   * @param ... $args
   */
  public new (...args) {
    mem = args;
  }
  
  /**
   * to-string method
   *
   * @return string
   */
  public fn __tostring() =>
    join();
  
  /**
   * type-cast
   *
   * @param  mixed $val
   * @return List_
   */
  public static fn from(val) {
    if (is_array(val)) {
      let lst = new self;
      lst.mem = val;
      return lst;
    }
    
    if (val is Dict) {
      let lst = new self;
      lst.mem = val.values();
      return mem;
    }
    
    return new self(val);
  }
  
  /**
   * returns a value at the given index
   *
   * @param  int $idx
   * @return mixed
   */
  public fn get(int idx) {
    if (idx < 0)
      idx = size() + idx;
    
    return isset(mem[idx]) ? mem[idx] : null;
  }
  
  /**
   * sets a value at the given index
   *
   * @param int $idx
   * @param mixed $val
   */
  public fn set(int idx, val) {
    if (idx < 0)
      idx = size() + idx;
    
    mem[idx] = val;
  }
  
  /**
   * checks if a value exists at the given index
   *
   * @param  int  $idx
   * @return boolean
   */
  public fn has(int idx) {
    if (idx < 0)
      idx = size() + idx;
    
    return isset(mem[idx]);
  }
  
  /**
   * deletes a index.
   * the list gets rearranged after deletion!
   * 
   * if you just want to delete a value, 
   * use `set(idx, null)` instead.
   *
   * @param  int $idx
   * @return boolean
   */
  public fn delete(int idx) {
    if (idx < 0)
      idx = size() + idx;
        
    if (array_key_exists(idx, mem)) {
      array_splice(mem, idx, 0);
      return true;
    }
    
    return false;
  }
  
  /* ------------------------------------ */
  
  /**
   * Inable#contains()
   *
   * @param  mixed $val
   * @return boolean
   */
  public fn contains(val) =>
    in_array(val, mem, true);
  
  /* ------------------------------------ */
  
  /**
   * ArrayAccess#offsetGet()
   * 
   * @see List_#get()
   */
  public __hidden__ fn offsetGet(int idx) {
    if (idx < 0)
      idx = size() + idx;
    
    return isset(mem[idx]) ? mem[idx] : null;
  }
  
  /**
   * ArrayAccess#offsetSet()
   * 
   * @see List_#set()
   */
  public __hidden__ fn offsetSet(int idx, val) {
    if (idx < 0)
      idx = size() + idx;
    
    mem[idx] = val;
  }
  
  /**
   * ArrayAccess#offsetExists()
   * 
   * @see List_#has()
   */
  public __hidden__ fn offsetExists(int idx) {
    if (idx < 0)
      idx = size() + idx;
    
    return isset(mem[idx]);
  }
  
  /**
   * ArrayAccess#offsetUnset()
   * 
   * @see List_#delete()
   */
  public __hidden__ fn offsetUnset(int idx) {
    if (idx < 0)
      idx = size() + idx;
    
    if (array_key_exists(idx, mem)) {
      array_splice(mem, idx, 0);
      return true;
    }
    
    return false;
  }
  
  /* ------------------------------------ */
  
  /**
   * returns the raw array
   *
   * @return array
   */
  public fn to_array() =>
    mem;
  
  /* ------------------------------------ */
  
  /**
   * returns the size of this list
   *
   * @return int
   */
  public fn size() =>
    count(mem);
  
  /* ------------------------------------ */
  /* mutator methods */
  
  /**
   * sets the internal array.
   *
   * @param  array  $mem
   * @return List_
   */
  public fn swap(tup mem) {
    // the new array must be a tuple
    // associative keys can not be accessed in this list
    this.mem = mem;
    return this;
  }
  
  /**
   * fills this list with values
   *
   * @param  mixed  $val
   * @param  int    $idx
   * @param  int    $end
   * @return List_
   */
  public fn fill(val, int idx = 0, int end?) {
    let len = size();
    
    if (end == null) 
      end = len;
    
    if (idx < 0)
      idx = len + idx;
    
    if (end < 0)
      end = len + end;
    
    while (idx < end) {
      mem[idx] = val;
      idx++;
    }
    
    return this;
  }
  
  /**
   * removes the last element from this list
   *
   * @return mixed
   */
  public fn pop() =>
    array_pop(mem);
  
  /**
   * appends values to the list
   *
   * @param  ... $val
   * @return int
   */
  public fn push(...val) =>
    array_push(mem, ...val);
  
  /**
   * reverses the list
   *
   * @return List_
   */
  public fn reverse() {
    mem = array_reverse(mem);
    return this;
  }
  
  /** 
   * removes the first element
   *
   * @return mixed
   */
  public fn shift() =>
    array_shift(mem);
  
  /**
   * sorts the list in place and returns it
   *
   * @param  callable  $fun
   * @return List_
   */
  public fn sort(callable fun?) {
    if (fun == null)
      sort(mem, SORT_REGULAR);
    else
      usort(mem, fun);
    
    return this;
  }
  
  /**
   * add/removes values
   *
   * @param  int $idx
   * @param  int $len
   * @param  ... $val
   * @return List_
   */
  public fn splice(int idx, int len, ...val) {
    let lst = new self;
    lst.mem = array_splice(mem, idx, len, val);
    return lst;
  }
  
  /**
   * adds elements at the beginning
   *
   * @param  ... $val
   * @return List_
   */
  public fn unshift(...val) {
    array_unshift(mem, ...val);
    return this;
  }
  
  /**
   * shuffles the list
   *
   * @return List_
   */
  public fn shuffle() {
    array_shuffle(mem);
    return this;
  }
  
  /* ------------------------------------ */
  /* accessor methods */
  
  /**
   * returns a new list with all the arguments concatenated
   *
   * @param  ... $val
   * @return List_
   */
  public fn concat(...val) {
    let dup = mem;
        
    for (itm in val)
      if (is_array(itm))
        dup = array_merge(dup, itm);
      else 
        array_push(dup, itm);
      
    let lst = new self;
    lst.mem = dup;
    return lst;
  }
  
  /**
   * joins all values together
   *
   * @param  string $sep
   * @return string
   */
  public fn join(str sep = ',') =>
    implode(sep, array_map(fn tos(val) {
      if (val == null) return 'null';
      if (val == true) return 'true';
      if (val == false) return 'false';
        
      if (is_scalar(val) || val is Obj)
        return val as str;
      
      // this is what Obj#__tostring() does
      if (is_object(val))
        return '<object ' 
          ~ get_class(val) ~ ' @ '  
          ~ spl_object_hash(val) 
          ~ '>';
      
      if (is_array(val))
        // return (val as List).join(sep)
        return implode(sep, array_map(tos, val));
      
      return '<???>';
    }, mem));
  
  /**
   * unsafe version of List#join() 
   *
   * @param  string sep
   * @return string
   */
  public fn unsafe_join(str sep = ',') =>
    implode(sep, mem);
  
  
  /**
   * extract a slice of the list
   *
   * @param  int $beg
   * @param  int $end
   * @return List_
   */
  public fn slice(beg?, end?) {
    let dup = mem;
    
    if (beg != null) {
      let len = size();
      beg = beg as int;
      end = end as int;
      
      if (beg < 0)
        beg = len + beg;
      
      if (end < 0)
        end = len + end;
                
      dup = array_slice(dup, beg, end);
    }
    
    let lst = new self;
    lst.mem = dup;
    return lst;
  }
  
  /**
   * searches for the given value and returns its index
   *
   * @param  mixed  $val
   * @param  int    $beg
   * @return int
   */
  public fn index_of(val, int beg = 0) {
    if (beg == 0) {
      let res = array_search(mem, val, true);
      return res == false ? -1 : res;
    }
    
    let len = size();
    
    if (beg < 0)
      beg = len + beg;
    
    if (len == 0 || beg >= len)
      return -1;
          
    while (beg < len) {
      if (mem[beg] == val)
        return beg;
      
      beg++;
    }    
    
    return -1;
  }
  
  /* ------------------------------------ */
  /* iteration methods */
  
  /**
   * iterator
   *
   * @return Iterable
   */
  public fn iter() =>
    mem;
  
  /**
   * calls a function for each item in this list.
   * same as map() but without generating a new list
   *
   * @param  callable $fun
   */
  public fn each(callable fun) {
    array_walk(mem, fun, this);
  }
  
  /**
   * returns true if all values pass the test implemented 
   * by the given callback
   *
   * @param  callable $fun
   * @return bool
   */
  public fn every(callable fun) {
    for (idx: itm in mem)
      if (!fun(itm, idx, this))
        return false;
      
    return true;
  }
  
  /**
   * returns true if at least one value passes the 
   * test implemented by the given callback
   *
   * @param  callable $fun
   * @return bool
   */
  public fn some(callable fun) {
    for (idx: itm in mem)
      if (fun(itm, idx, this))
        return true;
      
    return false;
  }
  
  /**
   * filters the list using the given callback
   *
   * @param  callable $fun
   * @return List_
   */
  public fn filter(callable fun) {    
    let lst = new self;
    lst.mem = array_filter(mem, fun, ARRAY_FILTER_USE_BOTH);
    return lst;
  }
  
  /**
   * searches for a value using the given callback
   *
   * @param  callable $fun
   * @return mixed
   */
  public fn find(callable fun) {
    for (idx: val in mem) 
      if (fun(val, idx, this))
        return val;
      
    return null;
  }
  
  /**
   * returns all keys
   *
   * @return Iterable
   */
  public fn keys() {
    for (idx: _ in mem)
      yield idx;
  }
  
  /**
   * creates a new list by calling the given 
   * callback for each item
   *
   * @param  callable $fun
   * @return List_
   */
  public fn map(callable fun) {    
    let lst = new self;
    lst.mem = array_map(fun, mem);
    return lst;
  }
  
  /** 
   * reduces the list to a single value using the given callback function
   *
   * @param  callable $fun
   * @return mixed
   */
  public fn reduce(callable fun, carry = null) {
    if (carry == null)
      return array_reduce(mem, fun);
    
    return array_reduce(mem, fun, carry);
  }
  
  /** 
   * reduces the list from right-to-left to a single 
   * value using the given callback function
   *
   * @param  callable $fun
   * @return mixed
   */
  public fn reduce_right(callable fun, carry = null) {
    let len = size();    
    let val = carry;
    
    if (len == 0)
      return val;
    
    let idx = len - 1;
    
    if (val == null) {
      val = mem[idx];
      idx -= 1;
    }
    
    while (idx >= 0) {
      val = fun(val, mem[idx] /* , $idx, $this */);
      idx--;
    }
    
    return val; 
  }
  
  /* ------------------------------------ */
  /* php coverage */
  
  // http://de1.php.net/manual/en/function.array-chunk.php
  public fn chunk(int size) {
    let lst = new self;
    lst.mem = array_map(fn (mem) {
      let lst = new self;
      lst.mem = mem;
      return lst;
    }, array_chunk(mem, size));
    
    return lst;
  }
    
  /**
   * probably a more convenient version of array_column()
   * since the phs-language does not have associative arrays
   *
   * @param  string $prop
   * @return List_
   */
  public fn pluck(str prop) {
    let lst = new self;
    lst.mem = array_map(fn (val) => val.{prop}, mem);
    return lst;
  }
}

