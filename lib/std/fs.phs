/*!
 * This file is part of the PHS Standard Library
 * Copyright (c) 2014 The PHS Team
 * 
 * All rights reserved.
 * 
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published 
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

module std::fs;

use std::io::FileStream;

public extern __global__ const FILE_USE_INCLUDE_PATH;
public extern __global__ const FILE_NO_DEFAULT_CONTEXT;
public extern __global__ const FILE_APPEND;
public extern __global__ const FILE_IGNORE_NEW_LINES ;
public extern __global__ const FILE_SKIP_EMPTY_LINES;
public extern __global__ const FILE_BINARY;
public extern __global__ const FILE_TEXT;

public extern __global__ const FNM_NOESCAPE;
public extern __global__ const FNM_PERIOD;
public extern __global__ const FNM_CASEFOLD;

public extern __global__ fn basename;
public extern __global__ fn chgrp;
public extern __global__ fn chmod;
public extern __global__ fn chown;
public extern __global__ fn clearstatcache;
public extern __global__ fn copy;
public extern __global__ fn dirname;
public extern __global__ fn disk_free_space;
public extern __global__ fn disk_total_space;
public extern __global__ fn diskfreespace;
public extern __global__ fn file_exists;
public extern __global__ fn file_get_contents;
public extern __global__ fn file_put_contents;
public extern __global__ fn file;
public extern __global__ fn fileatime;
public extern __global__ fn filectime;
public extern __global__ fn filegroup;
public extern __global__ fn fileinode;
public extern __global__ fn filemtime;
public extern __global__ fn fileowner;
public extern __global__ fn fileperms;
public extern __global__ fn filesize;
public extern __global__ fn filetype;
public extern __global__ fn fnmatch;

public extern __global__ fn is_dir;
public extern __global__ fn is_executable;
public extern __global__ fn is_file;
public extern __global__ fn is_link;
public extern __global__ fn is_readable;
public extern __global__ fn is_uploaded_file;
public extern __global__ fn is_writable;
public extern __global__ fn lchgrp;
public extern __global__ fn lchown;
public extern __global__ fn link;
public extern __global__ fn linkinfo;
public extern __global__ fn lstat;
public extern __global__ fn mkdir;
public extern __global__ fn move_uploaded_file;

public extern __global__ const INI_SCANNER_NORMAL;
public extern __global__ const INI_SCANNER_RAW;
    
public extern __global__ fn parse_ini_file;
public extern __global__ fn parse_ini_string;

public extern __global__ fn readfile;
public extern __global__ fn readlink;
public extern __global__ fn realpath_cache_get;
public extern __global__ fn realpath_cache_size;
public extern __global__ fn realpath;
public extern __global__ fn rename;
public extern __global__ fn rewind;
public extern __global__ fn rmdir;
public extern __global__ fn stat;
public extern __global__ fn symlink;
public extern __global__ fn tempnam;
public extern __global__ fn tmpfile;
public extern __global__ fn touch;
public extern __global__ fn umask;
public extern __global__ fn unlink;

public extern __global__ const GLOB_BRACE;
public extern __global__ const GLOB_ONLYDIR;
public extern __global__ const GLOB_MARK;
public extern __global__ const GLOB_NOSORT;
public extern __global__ const GLOB_NOCHECK;
public extern __global__ const GLOB_NOESCAPE;
public extern __global__ const GLOB_AVAILABLE_FLAGS;

public extern __global__ fn glob;

public extern __global__ const PATHINFO_DIRNAME;
public extern __global__ const PATHINFO_BASENAME;
public extern __global__ const PATHINFO_EXTENSION;
public extern __global__ const PATHINFO_FILENAME;

public extern __global__ fn pathinfo;
public extern __global__ const DIRECTORY_SEPARATOR;

public class FsError : Error {}

/**
 * basic file
 */
public class File {  
  
  private path;
  
  /**
   * constructor
   * 
   * @param string path
   */
  public new (str this.path) ;
  
  /**
   * opens the file and returns a FStream
   *
   * @param  string mode
   * @return FsStream
   */
  public fn open(str mode) =>
    new FileStream(path, mode);
  
  /**
   * opens the file in write-mode
   *
   * @return FsStream
   */
  public fn create() => open('w+');
  
  // WIP
  public fn is_dir() => self::is_dir(path);
  public fn is_file() => self::is_file(path);
  public fn is_readable() => self::is_readable(path);
  public fn is_writable() => self::is_writable(path);
   
  /**
   * removes the file or directory
   *
   * @param  bool   rec   recursive-removal of a directory
   * @return bool
   */
  #public fn remove(bool rec = false) =>
  #  is_dir() ? rec ? rmdir_r(path) : rmdir(path) : unlink(path);
   
  // temp ... makes file-objects work with file-functions
  public fn __tostring() => path;
    
  /**
   * type-cast handler
   *
   * @param  mixed path
   * @return File
   * @throws TypeError
   */
  public static fn from(path) {
    if (path is File) 
      return path;
    
    if (path is FileStream) 
      path = path.get_path();
    
    if (path is str) 
      return new File(path);
    
    throw new TypeError("can not create a file-object");
  }
}
